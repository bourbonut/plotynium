{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Plotynium framework documentation.</p>"},{"location":"#what-is-plotynium","title":"What is Plotynium ?","text":"<p>Plotynium is a Data Visualization framework for Python, inspired by Observable Plot.</p> <ul> <li> <p> Easy to use</p> <p>Implements concise code to explore your data</p> </li> <li> <p> Low dependencies</p> <p><code>plotynium</code> requires only <code>detroit</code> (&lt;3MB) and <code>lxml</code> (&lt;12MB) dependencies.</p> </li> <li> <p> Open Source</p> <p><code>plotynium</code> is licensed under MIT.</p> </li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>import polars as pl\nfrom sklearn.datasets import load_digits\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nimport plotynium as ply\n\nmnist = load_digits()\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(mnist.data)\npca = PCA(n_components=2)\ncomponents = pca.fit_transform(X_scaled)\n\n# Prepare your data with Polars, Pandas or manually\ndf = pl.DataFrame(components, schema=[\"Component 1\", \"Component 2\"])\ndf = df.insert_column(2, pl.Series(\"digit\", mnist.target))\n\nplot = ply.plot(\n    width=960,\n    height=657,\n    marks=[\n        ply.dot(\n            df.to_dicts(),\n            x=\"Component 1\",\n            y=\"Component 2\",\n            stroke=\"digit\", # (1)!\n            symbol=\"digit\", # (2)!\n        )\n    ],\n    color={\"scheme\": ply.Interpolation.RAINBOW}, # (3)!\n    symbol={\"legend\": True}, # (4)!\n    style={\"color\": \"#e6edf3\"}, # (5)!\n)\n\nwith open(\"pca.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>Colors of points are chosen given its <code>digit</code> value</li> <li>Symbols of points are chosen given its <code>digit</code> value</li> <li>Check out the colorscheme section to see all available colorschemes.</li> <li>It adds a legend of symbols (color included).</li> <li>Style your plot as you want. Checkout <code>StyleOptions</code> for more option details.</li> </ol>"},{"location":"introduction/","title":"Getting started","text":""},{"location":"introduction/#requirements","title":"Requirements","text":"<p>Plotynium requires Python 3.10. Since Plotynium has <code>lxml</code> as its dependencies, you should check the section about requirements for <code>lxml</code>.</p>"},{"location":"introduction/#installation","title":"Installation","text":""},{"location":"introduction/#from-pypi","title":"From PyPI","text":"<p>You can install Plotynium by running the following command:</p> <pre><code>pip install plotynium\n</code></pre>"},{"location":"introduction/#from-source","title":"From source","text":"<p>You can install Plotynium from source if you prefer with the following command:</p> <pre><code>pip install git+https://github.com/bourbonut/plotynium\n</code></pre>"},{"location":"introduction/#examples","title":"Examples","text":"<p>You can try out examples on the Plotynium repository. First, you need to get them:</p> <pre><code>git clone --depth=1 -n --single-branch https://github.com/bourbonut/plotynium.git\ncd plotynium\ngit sparse-checkout set --no-cone examples\ncd examples\n</code></pre>"},{"location":"api/","title":"API","text":"<p>Here is the API-level reference to the Plotynium API.</p>"},{"location":"api/context/","title":"plotynium.context","text":""},{"location":"api/context/#plotynium.context.Context","title":"plotynium.context.Context","text":"<pre><code>Context(canvas_properties, legend_properties, x_options, y_options, color_options, style_options, symbol_options, x_scale, y_scale, x_label=None, y_label=None)\n</code></pre> <p>The <code>Context</code> holds all information shared to <code>Mark</code> objects and <code>Legend</code> object. These information are computed dimensions, options, scalers and labels.</p> <p>Parameters:</p> Name Type Description Default <code>CanvasProperties</code> <p>Canvas properties (width, height and margin)</p> required <code>LegendProperties</code> <p>Legend properties (width, height and margin)</p> required <code>XOptions</code> <p>X axis options</p> required <code>YOptions</code> <p>Y axis options</p> required <code>ColorOptions</code> <p>Color options</p> required <code>StyleOptions</code> <p>Style options</p> required <code>SymbolOptions</code> <p>Symbol options</p> required <code>Scaler</code> <p>X scale from <code>detroit</code></p> required <code>Scaler</code> <p>Y scale from <code>detroit</code></p> required <code>str | None</code> <p>X label</p> <code>None</code> <code>str | None</code> <p>Y label</p> <code>None</code> Source code in <code>plotynium/context.py</code> <pre><code>def __init__(\n    self,\n    canvas_properties: CanvasProperties,\n    legend_properties: LegendProperties,\n    x_options: XOptions,\n    y_options: YOptions,\n    color_options: ColorOptions,\n    style_options: StyleOptions,\n    symbol_options: SymbolOptions,\n    x_scale: Scaler,\n    y_scale: Scaler,\n    x_label: str | None = None,\n    y_label: str | None = None,\n):\n    self._canvas_properties = canvas_properties\n    self._legend_properties = legend_properties\n\n    self._x_options = x_options\n    self._y_options = y_options\n    self._color_options = color_options\n    self._style_options = style_options\n    self._symbol_options = symbol_options\n\n    self._color_mapping = []\n    self._symbol_mapping = []\n\n    self._x = x_scale\n    self._y = y_scale\n</code></pre>"},{"location":"api/context/#plotynium.context.Context(canvas_properties)","title":"<code>canvas_properties</code>","text":""},{"location":"api/context/#plotynium.context.Context(legend_properties)","title":"<code>legend_properties</code>","text":""},{"location":"api/context/#plotynium.context.Context(x_options)","title":"<code>x_options</code>","text":""},{"location":"api/context/#plotynium.context.Context(y_options)","title":"<code>y_options</code>","text":""},{"location":"api/context/#plotynium.context.Context(color_options)","title":"<code>color_options</code>","text":""},{"location":"api/context/#plotynium.context.Context(style_options)","title":"<code>style_options</code>","text":""},{"location":"api/context/#plotynium.context.Context(symbol_options)","title":"<code>symbol_options</code>","text":""},{"location":"api/context/#plotynium.context.Context(x_scale)","title":"<code>x_scale</code>","text":""},{"location":"api/context/#plotynium.context.Context(y_scale)","title":"<code>y_scale</code>","text":""},{"location":"api/context/#plotynium.context.Context(x_label)","title":"<code>x_label</code>","text":""},{"location":"api/context/#plotynium.context.Context(y_label)","title":"<code>y_label</code>","text":""},{"location":"api/context/#plotynium.context.Context.background","title":"background  <code>property</code>","text":"<pre><code>background\n</code></pre> <p>Returns the background value.</p> <p>Returns:</p> Type Description <code>str</code> <p>Background value</p>"},{"location":"api/context/#plotynium.context.Context.canvas_translate","title":"canvas_translate  <code>property</code>","text":"<pre><code>canvas_translate\n</code></pre> <p>Returns the canvas translation value. For instance, <code>\"translate(15, 12)\"</code> and if <code>x</code> and <code>y</code> values of the translation equal zero, it returns <code>None</code>.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Translation value of the canvas</p>"},{"location":"api/context/#plotynium.context.Context.color","title":"color  <code>property</code>","text":"<pre><code>color\n</code></pre> <p>Returns the color of the text.</p> <p>Returns:</p> Type Description <code>str</code> <p>Text color value</p>"},{"location":"api/context/#plotynium.context.Context.color_mapping","title":"color_mapping  <code>property</code>","text":"<pre><code>color_mapping\n</code></pre> <p>Returns color mapping collected after the application of marks.</p> <p>Returns:</p> Type Description <code>list[tuple[str, str]]</code> <p>List of pairs (label, color)</p>"},{"location":"api/context/#plotynium.context.Context.color_scheme","title":"color_scheme  <code>property</code>","text":"<pre><code>color_scheme\n</code></pre> <p>Returns the color scheme value.</p> <p>Returns:</p> Type Description <code>ColorScheme</code> <p>Color scheme value</p>"},{"location":"api/context/#plotynium.context.Context.font_family","title":"font_family  <code>property</code>","text":"<pre><code>font_family\n</code></pre> <p>Returns the font family.</p> <p>Returns:</p> Type Description <code>str</code> <p>Font family value</p>"},{"location":"api/context/#plotynium.context.Context.font_size","title":"font_size  <code>property</code>","text":"<pre><code>font_size\n</code></pre> <p>Returns the font size.</p> <p>Returns:</p> Type Description <code>int</code> <p>Font size value</p>"},{"location":"api/context/#plotynium.context.Context.height","title":"height  <code>property</code>","text":"<pre><code>height\n</code></pre> <p>Returns height size of the canvas.</p> <p>Returns:</p> Type Description <code>int</code> <p>Height size of the canvas</p>"},{"location":"api/context/#plotynium.context.Context.labels","title":"labels  <code>property</code>","text":"<pre><code>labels\n</code></pre> <p>Returns the definition of user labels.</p> <p>Returns:</p> Type Description <code>dict[int, str]</code> <p>Dictionary where keys are indices of labels and values are label values</p>"},{"location":"api/context/#plotynium.context.Context.legend_properties","title":"legend_properties  <code>property</code>","text":"<pre><code>legend_properties\n</code></pre> <p>Returns legend properties.</p> <p>Returns:</p> Type Description <code>LegendProperties</code> <p>Legend properties.</p>"},{"location":"api/context/#plotynium.context.Context.margin","title":"margin  <code>property</code>","text":"<pre><code>margin\n</code></pre> <p>Returns margin values of the canvas.</p> <p>Returns:</p> Type Description <code>int</code> <p>Margin values of the canvas</p>"},{"location":"api/context/#plotynium.context.Context.symbol_mapping","title":"symbol_mapping  <code>property</code>","text":"<pre><code>symbol_mapping\n</code></pre> <p>Returns symbol mapping collected after the application of marks.</p> <p>Returns:</p> Type Description <code>list[tuple[str, str]]</code> <p>List of pairs (label, symbol path)</p>"},{"location":"api/context/#plotynium.context.Context.width","title":"width  <code>property</code>","text":"<pre><code>width\n</code></pre> <p>Returns width size of the canvas.</p> <p>Returns:</p> Type Description <code>int</code> <p>Width size of the canvas</p>"},{"location":"api/context/#plotynium.context.Context.x","title":"x  <code>property</code>","text":"<pre><code>x\n</code></pre> <p>Returns X scale.</p> <p>Returns:</p> Type Description <code>Scaler</code> <p>X scale</p>"},{"location":"api/context/#plotynium.context.Context.x_label","title":"x_label  <code>property</code>","text":"<pre><code>x_label\n</code></pre> <p>Returns X label.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>X label</p>"},{"location":"api/context/#plotynium.context.Context.y","title":"y  <code>property</code>","text":"<pre><code>y\n</code></pre> <p>Returns Y scale.</p> <p>Returns:</p> Type Description <code>Scaler</code> <p>Y scale</p>"},{"location":"api/context/#plotynium.context.Context.y_label","title":"y_label  <code>property</code>","text":"<pre><code>y_label\n</code></pre> <p>Returns Y label.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Y label</p>"},{"location":"api/context/#plotynium.context.Context.update_color_mapping","title":"update_color_mapping","text":"<pre><code>update_color_mapping(*color_mappings)\n</code></pre> <p>Sets the color mapping by prioritizing the longest color mapping list.</p> <p>Parameters:</p> Name Type Description Default <code>tuple[list[tuple[str, str]]]</code> <p>Several list of pairs (label, color)</p> <code>()</code> Source code in <code>plotynium/context.py</code> <pre><code>def update_color_mapping(self, *color_mappings: tuple[list[tuple[str, str]]]):\n    \"\"\"\n    Sets the color mapping by prioritizing the longest color mapping list.\n\n    Parameters\n    ----------\n    color_mappings : tuple[list[tuple[str, str]]]\n        Several list of pairs (label, color)\n    \"\"\"\n    color_mappings = [self._color_mapping] + list(color_mappings)\n    self._color_mapping = max(color_mappings, key=len)\n</code></pre>"},{"location":"api/context/#plotynium.context.Context.update_color_mapping(color_mappings)","title":"<code>color_mappings</code>","text":""},{"location":"api/context/#plotynium.context.Context.update_symbol_mapping","title":"update_symbol_mapping","text":"<pre><code>update_symbol_mapping(*symbol_mappings)\n</code></pre> <p>Sets the symbol mapping by prioritizing the longest symbol mapping list.</p> <p>Parameters:</p> Name Type Description Default <code>tuple[list[tuple[str, str]]]</code> <p>Several list of pairs (label, symbol path)</p> <code>()</code> Source code in <code>plotynium/context.py</code> <pre><code>def update_symbol_mapping(self, *symbol_mappings: tuple[list[tuple[str, str]]]):\n    \"\"\"\n    Sets the symbol mapping by prioritizing the longest symbol mapping list.\n\n    Parameters\n    ----------\n    symbol_mappings : tuple[list[tuple[str, str]]]\n        Several list of pairs (label, symbol path)\n    \"\"\"\n    symbol_mappings = [self._symbol_mapping] + list(symbol_mappings)\n    self._symbol_mapping = max(symbol_mappings, key=len)\n</code></pre>"},{"location":"api/context/#plotynium.context.Context.update_symbol_mapping(symbol_mappings)","title":"<code>symbol_mappings</code>","text":""},{"location":"api/interpolations/","title":"plotynium.interpolations","text":""},{"location":"api/interpolations/#plotynium.interpolations.Interpolation","title":"plotynium.interpolations.Interpolation","text":"<p>All available interpolations used mainly for color scheme</p>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.BLUES","title":"BLUES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLUES = interpolate_blues\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.BRBG","title":"BRBG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BRBG = interpolate_brbg\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.BUGN","title":"BUGN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUGN = interpolate_bugn\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.BUPU","title":"BUPU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUPU = interpolate_bupu\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.CIVIDIS","title":"CIVIDIS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CIVIDIS = interpolate_cividis\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.COOL","title":"COOL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COOL = interpolate_cool\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.DEFAULT","title":"DEFAULT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEFAULT = interpolate_cubehelix_default\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.GNBU","title":"GNBU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GNBU = interpolate_gnbu\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.GREENS","title":"GREENS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GREENS = interpolate_greens\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.GREYS","title":"GREYS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GREYS = interpolate_greys\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.INFERNO","title":"INFERNO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INFERNO = interpolate_inferno\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.MAGMA","title":"MAGMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MAGMA = interpolate_magma\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.ORANGES","title":"ORANGES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ORANGES = interpolate_oranges\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.ORRD","title":"ORRD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ORRD = interpolate_orrd\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PIYG","title":"PIYG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PIYG = interpolate_piyg\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PLASMA","title":"PLASMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLASMA = interpolate_plasma\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PRGN","title":"PRGN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PRGN = interpolate_prgn\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PUBU","title":"PUBU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PUBU = interpolate_pubu\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PUBUGN","title":"PUBUGN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PUBUGN = interpolate_pubugn\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PUOR","title":"PUOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PUOR = interpolate_puor\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PURD","title":"PURD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PURD = interpolate_purd\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.PURPLES","title":"PURPLES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PURPLES = interpolate_purples\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.RAINBOW","title":"RAINBOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RAINBOW = interpolate_rainbow\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.RDBU","title":"RDBU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RDBU = interpolate_rdbu\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.RDGY","title":"RDGY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RDGY = interpolate_rdgy\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.RDPU","title":"RDPU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RDPU = interpolate_rdpu\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.RDYLBU","title":"RDYLBU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RDYLBU = interpolate_rdylbu\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.RDYLGN","title":"RDYLGN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RDYLGN = interpolate_rdylgn\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.REDS","title":"REDS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REDS = interpolate_reds\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.SINEBOW","title":"SINEBOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SINEBOW = interpolate_sinebow\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.SPECTRAL","title":"SPECTRAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SPECTRAL = interpolate_spectral\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.TURBO","title":"TURBO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TURBO = interpolate_turbo\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.VIRIDIS","title":"VIRIDIS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VIRIDIS = interpolate_viridis\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.WARM","title":"WARM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARM = interpolate_warm\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.YLGN","title":"YLGN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YLGN = interpolate_ylgn\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.YLGNBU","title":"YLGNBU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YLGNBU = interpolate_ylgnbu\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.YLORBR","title":"YLORBR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YLORBR = interpolate_ylorbr\n</code></pre>"},{"location":"api/interpolations/#plotynium.interpolations.Interpolation.YLORRD","title":"YLORRD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YLORRD = interpolate_ylorrd\n</code></pre>"},{"location":"api/options/","title":"plotynium.options","text":""},{"location":"api/options/#plotynium.options.ColorOptions","title":"plotynium.options.ColorOptions  <code>dataclass</code>","text":"<pre><code>ColorOptions(scheme=None, legend=False, labels=None)\n</code></pre> <p>Color options applied on circles, lines, rectangles or symbols when it is possible.</p>"},{"location":"api/options/#plotynium.options.ColorOptions.labels","title":"labels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>labels = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.ColorOptions.legend","title":"legend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>legend = field(default=False)\n</code></pre>"},{"location":"api/options/#plotynium.options.ColorOptions.scheme","title":"scheme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scheme = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.ColorOptions.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(values=None)\n</code></pre> Source code in <code>plotynium/options.py</code> <pre><code>@staticmethod\ndef new(values: dict | None = None) -&gt; TColorOptions:\n    default_values = ColorOptions()\n    if values is None:\n        return default_values\n    return ColorOptions(\n        scheme=values.get(\"scheme\", default_values.scheme),\n        legend=values.get(\"legend\", default_values.legend),\n        labels=values.get(\"labels\", default_values.labels),\n    )\n</code></pre>"},{"location":"api/options/#plotynium.options.SymbolOptions","title":"plotynium.options.SymbolOptions  <code>dataclass</code>","text":"<pre><code>SymbolOptions(legend=False)\n</code></pre> <p>Symbol options used for dots mark when symbols are specified.</p>"},{"location":"api/options/#plotynium.options.SymbolOptions.legend","title":"legend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>legend = field(default=False)\n</code></pre>"},{"location":"api/options/#plotynium.options.SymbolOptions.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(values=None)\n</code></pre> Source code in <code>plotynium/options.py</code> <pre><code>@staticmethod\ndef new(values: dict | None = None) -&gt; TSymbolOptions:\n    default_values = SymbolOptions()\n    if values is None:\n        return default_values\n    return SymbolOptions(legend=values.get(\"legend\", default_values.legend))\n</code></pre>"},{"location":"api/options/#plotynium.options.StyleOptions","title":"plotynium.options.StyleOptions  <code>dataclass</code>","text":"<pre><code>StyleOptions(background='none', color='black', font_size=12, font_family='sans-serif')\n</code></pre> <p>Style options of the plot</p>"},{"location":"api/options/#plotynium.options.StyleOptions.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background = field(default='none')\n</code></pre>"},{"location":"api/options/#plotynium.options.StyleOptions.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color = field(default='black')\n</code></pre>"},{"location":"api/options/#plotynium.options.StyleOptions.font_family","title":"font_family  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>font_family = field(default='sans-serif')\n</code></pre>"},{"location":"api/options/#plotynium.options.StyleOptions.font_size","title":"font_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>font_size = field(default=12)\n</code></pre>"},{"location":"api/options/#plotynium.options.StyleOptions.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(values=None)\n</code></pre> Source code in <code>plotynium/options.py</code> <pre><code>@staticmethod\ndef new(values: dict | None = None) -&gt; TStyleOptions:\n    default_values = StyleOptions()\n    if values is None:\n        return default_values\n    return StyleOptions(\n        background=values.get(\"background\", default_values.background),\n        color=values.get(\"color\", default_values.color),\n        font_size=values.get(\"font_size\", default_values.font_size),\n        font_family=values.get(\"font_family\", default_values.font_family),\n    )\n</code></pre>"},{"location":"api/options/#plotynium.options.SortOptions","title":"plotynium.options.SortOptions  <code>dataclass</code>","text":"<pre><code>SortOptions(by='', descending=False)\n</code></pre> <p>Sort options for bar mark</p>"},{"location":"api/options/#plotynium.options.SortOptions.by","title":"by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>by = field(default='')\n</code></pre>"},{"location":"api/options/#plotynium.options.SortOptions.descending","title":"descending  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>descending = field(default=False)\n</code></pre>"},{"location":"api/options/#plotynium.options.SortOptions.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(values=None)\n</code></pre> Source code in <code>plotynium/options.py</code> <pre><code>@staticmethod\ndef new(values: dict | None = None) -&gt; TSortOptions:\n    default_values = SortOptions()\n    if values is None:\n        return default_values\n    return SortOptions(\n        by=values.get(\"by\", default_values.by),\n        descending=values.get(\"descending\", default_values.descending),\n    )\n</code></pre>"},{"location":"api/options/#plotynium.options.XOptions","title":"plotynium.options.XOptions  <code>dataclass</code>","text":"<pre><code>XOptions(nice=False, grid=False, label=None, count=None, specifier=None)\n</code></pre> <p>Options for x axis</p>"},{"location":"api/options/#plotynium.options.XOptions.count","title":"count  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>count = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.XOptions.grid","title":"grid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>grid = field(default=False)\n</code></pre>"},{"location":"api/options/#plotynium.options.XOptions.label","title":"label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>label = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.XOptions.nice","title":"nice  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>nice = field(default=False)\n</code></pre>"},{"location":"api/options/#plotynium.options.XOptions.specifier","title":"specifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>specifier = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.XOptions.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(values=None)\n</code></pre> Source code in <code>plotynium/options.py</code> <pre><code>@staticmethod\ndef new(values: dict | None = None) -&gt; TXOptions:\n    default_values = XOptions()\n    if values is None:\n        return default_values\n    return XOptions(\n        nice=values.get(\"nice\", default_values.nice),\n        grid=values.get(\"grid\", default_values.grid),\n        label=values.get(\"label\", default_values.label),\n        count=values.get(\"count\", default_values.count),\n        specifier=values.get(\"specifier\", default_values.specifier),\n    )\n</code></pre>"},{"location":"api/options/#plotynium.options.YOptions","title":"plotynium.options.YOptions  <code>dataclass</code>","text":"<pre><code>YOptions(nice=True, grid=False, label=None, count=None, specifier=None)\n</code></pre> <p>Options for y axis</p>"},{"location":"api/options/#plotynium.options.YOptions.count","title":"count  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>count = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.YOptions.grid","title":"grid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>grid = field(default=False)\n</code></pre>"},{"location":"api/options/#plotynium.options.YOptions.label","title":"label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>label = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.YOptions.nice","title":"nice  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>nice = field(default=True)\n</code></pre>"},{"location":"api/options/#plotynium.options.YOptions.specifier","title":"specifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>specifier = field(default=None)\n</code></pre>"},{"location":"api/options/#plotynium.options.YOptions.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(values=None)\n</code></pre> Source code in <code>plotynium/options.py</code> <pre><code>@staticmethod\ndef new(values: dict | None = None) -&gt; TYOptions:\n    default_values = YOptions()\n    if values is None:\n        return default_values\n    return YOptions(\n        nice=values.get(\"nice\", default_values.nice),\n        grid=values.get(\"grid\", default_values.grid),\n        label=values.get(\"label\", default_values.label),\n        count=values.get(\"count\", default_values.count),\n        specifier=values.get(\"specifier\", default_values.specifier),\n    )\n</code></pre>"},{"location":"api/plot/","title":"plotynium.plot","text":""},{"location":"api/plot/#plotynium.plot.plot","title":"plotynium.plot.plot","text":"<pre><code>plot(marks, width=None, height=None, margin_top=10, margin_left=45, margin_bottom=45, margin_right=10, grid=False, x=None, y=None, color=None, style=None, symbol=None)\n</code></pre> <p>Generates a SVG plot from the given marks and different specified options</p> <p>Parameters:</p> Name Type Description Default <code>list[Mark]</code> <p>List of marks represented on the plot</p> required <code>int</code> <p>Width size</p> <code>None</code> <code>int</code> <p>Height size</p> <code>None</code> <code>int</code> <p>Margin top value</p> <code>10</code> <code>int</code> <p>Margin left value</p> <code>45</code> <code>int</code> <p>Margin bottom value</p> <code>45</code> <code>int</code> <p>Margin right value</p> <code>10</code> <code>bool</code> <p><code>True</code> to add all lines to form a grid</p> <code>False</code> <code>XOptions | dict | None</code> <p>X axis options</p> <code>None</code> <code>YOptions | dict | None</code> <p>Y axis options</p> <code>None</code> <code>ColorOptions | dict | None</code> <p>Color scheme options</p> <code>None</code> <code>StyleOptions | dict | None</code> <p>Style options</p> <code>None</code> <code>SymbolOptions | dict | None</code> <p>Symbol options</p> <code>None</code> <p>Returns:</p> Type Description <code>Selection</code> <p>Generated SVG plot</p> Source code in <code>plotynium/plot.py</code> <pre><code>def plot(\n    marks: list[Mark],\n    width: int | None = None,\n    height: int | None = None,\n    margin_top: int = 10,\n    margin_left: int = 45,\n    margin_bottom: int = 45,\n    margin_right: int = 10,\n    grid: bool = False,\n    x: XOptions | dict | None = None,\n    y: YOptions | dict | None = None,\n    color: ColorOptions | dict | None = None,\n    style: StyleOptions | dict | None = None,\n    symbol: SymbolOptions | dict | None = None,\n) -&gt; Selection:\n    \"\"\"\n    Generates a SVG plot from the given marks and different specified options\n\n    Parameters\n    ----------\n    marks : list[Mark]\n        List of marks represented on the plot\n    width : int\n        Width size\n    height : int\n        Height size\n    margin_top : int\n        Margin top value\n    margin_left : int\n        Margin left value\n    margin_bottom : int\n        Margin bottom value\n    margin_right : int\n        Margin right value\n    grid : bool\n        `True` to add all lines to form a grid\n    x : XOptions | dict | None\n        X axis options\n    y : YOptions | dict | None\n        Y axis options\n    color : ColorOptions | dict | None\n        Color scheme options\n    style : StyleOptions | dict | None\n        Style options\n    symbol : SymbolOptions | dict | None\n        Symbol options\n\n    Returns\n    -------\n    Selection\n        Generated SVG plot\n    \"\"\"\n    # Prepare options\n    marks = list(marks)\n    x_options = init_options(x, XOptions)\n    y_options = init_options(y, YOptions)\n    color_options = init_options(color, ColorOptions)\n    style_options = init_options(style, StyleOptions)\n    symbol_options = init_options(symbol, SymbolOptions)\n\n    user_legend_option = color_options.legend or symbol_options.legend\n    margin = Margin(margin_top, margin_left, margin_bottom, margin_right)\n    width, height, canvas_properties, legend_properties = dimensions(\n        marks,\n        user_legend_option,\n        width,\n        height,\n        margin,\n    )\n\n    # Set labels\n    x_label = x_options.label\n    y_label = y_options.label\n    if x_label is None and y_label is None:\n        x_label = determine_label([mark.x_label for mark in marks])\n        y_label = determine_label([mark.y_label for mark in marks])\n\n    # Set scalers\n    x_scaler_types = [mark.x_scaler_type for mark in marks]\n    y_scaler_types = [mark.y_scaler_type for mark in marks]\n\n    x_domains = [mark.x_domain for mark in marks]\n    y_domains = [mark.y_domain for mark in marks]\n\n    x_ranges = [margin.left, canvas_properties.width - margin.right]\n    y_ranges = [canvas_properties.height - margin.bottom, margin.top]\n\n    x = x_scale = make_scaler(x_scaler_types, x_domains, x_ranges, nice=x_options.nice)\n    y = y_scale = make_scaler(y_scaler_types, y_domains, y_ranges, nice=y_options.nice)\n\n    # Creates a context shared between marks and legend\n    ctx = Context(\n        canvas_properties,\n        legend_properties,\n        x_options,\n        y_options,\n        color_options,\n        style_options,\n        symbol_options,\n        x_scale,\n        y_scale,\n        x_label,\n        y_label,\n    )\n\n    # Conditions to check if the mark is unique\n    only_legend = len(marks) == 1 and check_types(Legend)(marks[0])\n    only_axis_x = len(marks) == 1 and check_types(AxisX)(marks[0])\n    only_axis_y = len(marks) == 1 and check_types(AxisY)(marks[0])\n    is_not_unique = not (only_legend or only_axis_x or only_axis_y)\n\n    # Checks if legend is True or if it exists\n    legend_marks = list(filter(check_types(Legend), marks))\n    add_legend = len(legend_marks) &gt; 0 or user_legend_option\n\n    if is_not_unique:\n        # Set x axis\n        if not any(map(check_types(AxisX), marks)):\n            x_ticks = x.ticks() if hasattr(x, \"ticks\") else x.get_domain()\n            x_tick_format = (\n                x.tick_format(x_options.count, x_options.specifier)\n                if hasattr(x, \"tick_format\")\n                else x.get_domain()\n            )\n            marks.append(\n                AxisX(\n                    x_ticks,\n                    tick_format=x_tick_format,\n                    label=x_label,\n                    fill=style_options.color,\n                )\n            )\n\n        # Set y axis\n        if not any(map(check_types(AxisY), marks)):\n            y_ticks = y.ticks() if hasattr(y, \"ticks\") else y.get_domain()\n            y_tick_format = (\n                y.tick_format(y_options.count, y_options.specifier)\n                if hasattr(y, \"tick_format\")\n                else y.get_domain()\n            )\n            marks.append(\n                AxisY(\n                    y_ticks,\n                    tick_format=y_tick_format,\n                    label=y_label,\n                    fill=style_options.color,\n                )\n            )\n\n        # Set x grid\n        if not any(map(check_types(GridX), marks)) and x_options.grid or grid:\n            x_ticks = x.ticks() if hasattr(x, \"ticks\") else x.get_domain()\n            marks.append(GridX(x_ticks))\n\n        # Set y grid\n        if not any(map(check_types(GridY), marks)) and y_options.grid or grid:\n            y_ticks = y.ticks() if hasattr(y, \"ticks\") else y.get_domain()\n            marks.append(GridY(y_ticks))\n\n    svg = (\n        d3.create(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"viewBox\", f\"0 0 {width} {height}\")\n        .style(\"font-size\", f\"{ctx.font_size}px\")\n        .style(\"font-family\", ctx.font_family)\n    )\n\n    default_style = StyleOptions()\n    if ctx.background != default_style.background:\n        svg.style(\"background\", ctx.background)\n    if ctx.color != default_style.color:\n        svg.style(\"color\", ctx.color)\n\n    if add_legend:\n        legend_group = svg.append(\"g\").attr(\"class\", \"legend\")\n\n    if not only_legend:\n        canvas_group = svg.append(\"g\").attr(\"class\", \"canvas\")\n        if translate := ctx.canvas_translate:\n            canvas_group.attr(\"transform\", translate)\n\n        # Apply mark on SVG content\n        for mark in marks:\n            mark.apply(canvas_group, ctx)\n\n    if add_legend:\n        # Gets legend or creates new one\n        legend = Legend(\n            ctx.color_mapping,\n            ctx.symbol_mapping,\n            ctx.color_scheme,\n        )\n        if len(legend_marks) &gt; 0:\n            legend = legend_marks[0]\n        legend.apply(legend_group, ctx)\n\n    return svg\n</code></pre>"},{"location":"api/plot/#plotynium.plot.plot(marks)","title":"<code>marks</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(width)","title":"<code>width</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(height)","title":"<code>height</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(margin_top)","title":"<code>margin_top</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(margin_left)","title":"<code>margin_left</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(margin_bottom)","title":"<code>margin_bottom</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(margin_right)","title":"<code>margin_right</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(grid)","title":"<code>grid</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(x)","title":"<code>x</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(y)","title":"<code>y</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(color)","title":"<code>color</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(style)","title":"<code>style</code>","text":""},{"location":"api/plot/#plotynium.plot.plot(symbol)","title":"<code>symbol</code>","text":""},{"location":"api/properties/","title":"plotynium.properties","text":""},{"location":"api/properties/#plotynium.properties.CanvasProperties","title":"plotynium.properties.CanvasProperties","text":"<pre><code>CanvasProperties()\n</code></pre> <p>Canvas properties which has default values for <code>width</code>, <code>height</code> and <code>margin</code> values and has two extra attributes <code>translate_x</code> and <code>translate_y</code> for canvas placement.</p> Source code in <code>plotynium/properties.py</code> <pre><code>def __init__(self):\n    super().__init__(\n        DEFAULT_CANVAS_WIDTH,\n        int(DEFAULT_CANVAS_WIDTH / sqrt(2)),\n        Margin(0, 0, 0, 0),\n    )\n    self._translate_x = 0\n    self._translate_y = 0\n</code></pre>"},{"location":"api/properties/#plotynium.properties.CanvasProperties.translate","title":"translate  <code>property</code>","text":"<pre><code>translate\n</code></pre> <p>Returns the translation value. For instance, <code>\"translate(15, 12)\"</code> and if <code>x</code> and <code>y</code> values of the translation equal zero, it returns <code>None</code>.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Translation value</p>"},{"location":"api/properties/#plotynium.properties.CanvasProperties.set_translate","title":"set_translate","text":"<pre><code>set_translate(x=0, y=0)\n</code></pre> <p>Sets the translation values</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>X translation value</p> <code>0</code> <code>int</code> <p>Y translation value</p> <code>0</code> Source code in <code>plotynium/properties.py</code> <pre><code>def set_translate(self, x: int = 0, y: int = 0):\n    \"\"\"\n    Sets the translation values\n\n    Parameters\n    ----------\n    x : int\n        X translation value\n    y : int\n        Y translation value\n    \"\"\"\n    self._translate_x = x\n    self._translate_y = y\n</code></pre>"},{"location":"api/properties/#plotynium.properties.CanvasProperties.set_translate(x)","title":"<code>x</code>","text":""},{"location":"api/properties/#plotynium.properties.CanvasProperties.set_translate(y)","title":"<code>y</code>","text":""},{"location":"api/properties/#plotynium.properties.LegendProperties","title":"plotynium.properties.LegendProperties","text":"<pre><code>LegendProperties()\n</code></pre> <p>Legend properties which has default values for <code>width</code>, <code>height</code> and <code>margin</code> values.</p> Source code in <code>plotynium/properties.py</code> <pre><code>def __init__(self):\n    super().__init__(\n        DEFAULT_LEGEND_WIDTH,\n        DEFAULT_LEGEND_HEIGHT,\n        Margin(\n            (DEFAULT_LEGEND_HEIGHT - DEFAULT_SQUARE_SIZE // 2) // 2,\n            DEFAULT_SQUARE_SIZE,\n            (DEFAULT_LEGEND_HEIGHT - DEFAULT_SQUARE_SIZE // 2) // 2,\n            DEFAULT_SQUARE_SIZE,\n        ),\n    )\n</code></pre>"},{"location":"api/properties/#plotynium.properties.LegendProperties.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(width=240, height=50, margin_top=21, margin_left=15, margin_bottom=21, margin_right=15)\n</code></pre> <p>Returns legend properties given specific values.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>Width value</p> <code>240</code> <code>int</code> <p>Height value</p> <code>50</code> <code>int</code> <p>Margin top value</p> <code>21</code> <code>int</code> <p>Margin left value</p> <code>15</code> <code>int</code> <p>Margin bottom value</p> <code>21</code> <code>int</code> <p>Margin right value</p> <code>15</code> <p>Returns:</p> Type Description <code>LegendProperties</code> <p>Legend properties filled with the given values</p> Source code in <code>plotynium/properties.py</code> <pre><code>@classmethod\ndef new(\n    self,\n    width: int = 240,\n    height: int = 50,\n    margin_top: int = 21,\n    margin_left: int = 15,\n    margin_bottom: int = 21,\n    margin_right: int = 15,\n) -&gt; TLegendProperties:\n    \"\"\"\n    Returns legend properties given specific values.\n\n    Parameters\n    ----------\n    width : int\n        Width value\n    height : int\n        Height value\n    margin_top : int\n        Margin top value\n    margin_left : int\n        Margin left value\n    margin_bottom : int\n        Margin bottom value\n    margin_right : int\n        Margin right value\n\n    Returns\n    -------\n    LegendProperties\n        Legend properties filled with the given values\n    \"\"\"\n    properties = LegendProperties()\n    properties.set_width(width)\n    properties.set_height(height)\n    properties.set_margin(\n        Margin(\n            margin_top,\n            margin_left,\n            margin_bottom,\n            margin_right,\n        )\n    )\n    return properties\n</code></pre>"},{"location":"api/properties/#plotynium.properties.LegendProperties.new(width)","title":"<code>width</code>","text":""},{"location":"api/properties/#plotynium.properties.LegendProperties.new(height)","title":"<code>height</code>","text":""},{"location":"api/properties/#plotynium.properties.LegendProperties.new(margin_top)","title":"<code>margin_top</code>","text":""},{"location":"api/properties/#plotynium.properties.LegendProperties.new(margin_left)","title":"<code>margin_left</code>","text":""},{"location":"api/properties/#plotynium.properties.LegendProperties.new(margin_bottom)","title":"<code>margin_bottom</code>","text":""},{"location":"api/properties/#plotynium.properties.LegendProperties.new(margin_right)","title":"<code>margin_right</code>","text":""},{"location":"api/schemes/","title":"plotynium.schemes","text":""},{"location":"api/schemes/#plotynium.schemes.Scheme","title":"plotynium.schemes.Scheme","text":"<p>All available schemes for color scheme</p>"},{"location":"api/schemes/#plotynium.schemes.Scheme.ACCENT","title":"ACCENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ACCENT = scale_ordinal(SCHEME_ACCENT)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.CATEGORY_10","title":"CATEGORY_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CATEGORY_10 = scale_ordinal(SCHEME_CATEGORY_10)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.DARK_2","title":"DARK_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_2 = scale_ordinal(SCHEME_DARK_2)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.OBSERVABLE_10","title":"OBSERVABLE_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OBSERVABLE_10 = scale_ordinal(SCHEME_OBSERVABLE_10)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.PAIRED","title":"PAIRED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PAIRED = scale_ordinal(SCHEME_PAIRED)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.PASTEL_1","title":"PASTEL_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PASTEL_1 = scale_ordinal(SCHEME_PASTEL_1)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.PASTEL_2","title":"PASTEL_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PASTEL_2 = scale_ordinal(SCHEME_PASTEL_2)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.SET_1","title":"SET_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SET_1 = scale_ordinal(SCHEME_SET_1)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.SET_2","title":"SET_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SET_2 = scale_ordinal(SCHEME_SET_2)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.SET_3","title":"SET_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SET_3 = scale_ordinal(SCHEME_SET_3)\n</code></pre>"},{"location":"api/schemes/#plotynium.schemes.Scheme.TABLEAU_10","title":"TABLEAU_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TABLEAU_10 = scale_ordinal(SCHEME_TABLEAU_10)\n</code></pre>"},{"location":"api/types/","title":"plotynium.types","text":""},{"location":"api/types/#plotynium.types.Number","title":"plotynium.types.Number  <code>module-attribute</code>","text":"<pre><code>Number = int | float\n</code></pre>"},{"location":"api/types/#plotynium.types.Data","title":"plotynium.types.Data  <code>module-attribute</code>","text":"<pre><code>Data = Number | str\n</code></pre>"},{"location":"api/types/#plotynium.types.Index","title":"plotynium.types.Index  <code>module-attribute</code>","text":"<pre><code>Index = int\n</code></pre>"},{"location":"api/marks/area_y/","title":"AreaY","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY","title":"plotynium.marks.AreaY","text":"<pre><code>AreaY(data, x=None, y=None, y1=None, y2=None, fill=None, fill_opacity=1.0, stroke=None, stroke_width=1.0, stroke_opacity=1.0, stroke_dasharray=None, opacity=1.0)\n</code></pre> <p>Marker for drawing areas defined by y positions.</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List where point coordinates are stored.</p> required <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value when area begins from <code>y = 0</code> (do not specify <code>y1</code> or <code>y2</code> if you choose this argument).</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value for y positions for the bottom area's part (do not specify <code>y</code> argument if you choose the this argument).</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value for y positions for the top area's part (do not specify <code>y</code> argument if you choose the this argument).</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>fill</code> attribute.</p> <code>None</code> <code>float</code> <p>Fill opacity value included in [0, 1].</p> <code>1.0</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1.0</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> <code>float</code> <p>General opacity value included in [0, 1].</p> <code>1.0</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>When incoherence found between 'y0' and 'y1' domains.</p> <code>ValueError</code> <p>When 'y' is undefined or 'y1' and 'y2' are undefined.</p> Source code in <code>plotynium/marks/area.py</code> <pre><code>def __init__(\n    self,\n    data: list[T],\n    x: Callable[[T], Data] | Index | str | None = None,\n    y: Callable[[T], Data] | Index | str | None = None,\n    y1: Callable[[T], Data] | Index | str | None = None,\n    y2: Callable[[T], Data] | Index | str | None = None,\n    fill: Callable[[T], str] | str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: Callable[[T], str] | str | None = None,\n    stroke_width: float = 1.0,\n    stroke_opacity: float = 1.0,\n    stroke_dasharray: str | None = None,\n    opacity: float = 1.0,\n):\n    Mark.__init__(self)\n    self._data = data\n    self.x_label = x if isinstance(x, str) else None\n    self.y_label = y if isinstance(y, str) else None\n    self._x = getter(x or 0)\n    self._y = getter(y or 1)\n\n    if y1 is not None and y2 is not None:\n        self._y0 = getter(y1)\n        self._y1 = getter(y2)\n    elif y1 is None and y2 is None:\n        self._y1 = getter(y or 1)\n        self._y0 = Constant(0)\n    else:\n        raise ValueError(\n            \"'y' must be specified or 'y1' and 'y2' must be specified.\"\n        )\n\n    self.x_domain = domain(self._data, self._x)\n    y0_domain = domain(self._data, self._y0)\n    y1_domain = domain(self._data, self._y1)\n\n    self.x_scaler_type = determine_scaler(self._data, self._x)\n    y0_scaler_type = determine_scaler(self._data, self._y0)\n    y1_scaler_type = determine_scaler(self._data, self._y1)\n    if y0_scaler_type == y1_scaler_type:\n        self.y_scaler_type = y0_scaler_type\n    else:\n        raise RuntimeError(\n            \"Incoherence between 'y0' and 'y1' domains \"\n            f\"(found y0 domain: {y0_domain} and y1 domain : {y1_domain})\"\n        )\n\n    self.y_domain = reduce([y0_domain, y1_domain])\n\n    Style.__init__(\n        self,\n        data=data,\n        default_fill=\"black\",\n        default_stroke=\"none\",\n        fill=fill,\n        fill_opacity=fill_opacity,\n        stroke=stroke,\n        stroke_width=stroke_width,\n        stroke_opacity=stroke_opacity,\n        stroke_dasharray=stroke_dasharray,\n        opacity=opacity,\n    )\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY(data)","title":"<code>data</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(x)","title":"<code>x</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(y)","title":"<code>y</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(y1)","title":"<code>y1</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(y2)","title":"<code>y2</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY(opacity)","title":"<code>opacity</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = domain(_data, _x)\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY.x_label","title":"x_label  <code>instance-attribute</code>","text":"<pre><code>x_label = x if isinstance(x, str) else None\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_data, _x)\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = reduce([y0_domain, y1_domain])\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY.y_label","title":"y_label  <code>instance-attribute</code>","text":"<pre><code>y_label = y if isinstance(y, str) else None\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = y0_scaler_type\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add an area defined by y values on SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/area.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add an area defined by y values on SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    area = (\n        d3.area()\n        .x(\n            (lambda d: ctx.x(self._x(d)))\n            if self.x_scaler_type == Scaler.CONTINUOUS\n            else (lambda d: ctx.x(self._x(d).timestamp()))\n        )\n        .y0(lambda d: ctx.y(self._y0(d)))\n        .y1(lambda d: ctx.y(self._y1(d)))\n    )\n\n    area = (\n        svg.append(\"g\")\n        .attr(\"class\", \"area\")\n        .append(\"path\")\n        .attr(\"fill\", self._fill)\n        .attr(\"stroke\", self._stroke)\n        .attr(\"stroke-width\", self._stroke_width)\n        .attr(\"d\", area(self._data))\n    )\n\n    if self._opacity != 1.0:\n        area.attr(\"opacity\", self._opacity)\n    if self._stroke_opacity != 1.0:\n        area.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_dasharray is not None:\n        area.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._fill_opacity != 1.0:\n        area.attr(\"fill-opacity\", self._fill_opacity)\n</code></pre>"},{"location":"api/marks/area_y/#plotynium.marks.AreaY.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/area_y/#plotynium.marks.AreaY.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/axis_x/","title":"AxisX","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX","title":"plotynium.marks.AxisX","text":"<pre><code>AxisX(data=None, x=None, y=None, anchor='bottom', label=None, fill=None, tick_rotate=0.0, tick_size=6, tick_format=None, stroke=None, stroke_opacity=1.0, stroke_width=1)\n</code></pre> <p>Marker for making an X axis.</p> <p>Parameters:</p> Name Type Description Default <code>list[T] | None</code> <p>List of data for making X axis</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[..., float] | str | None</code> <p>Y accessor function or key value</p> <code>None</code> <code>Literal['top', 'bottom']</code> <p>Anchor location, where <code>\"top\"</code> orientates ticks up and sets the axis position on the top of the plot whereas <code>\"bottom\"</code> orientates ticks down and sets the axis position on the bottom.</p> <code>'bottom'</code> <code>str | None</code> <p>Label of the x axis.</p> <code>None</code> <code>str | None</code> <p>Fill color value.</p> <code>None</code> <code>float</code> <p>Tick rotation value.</p> <code>0.0</code> <code>int</code> <p>Tick size value.</p> <code>6</code> <code>Callable[[T], str] | None</code> <p>Tick format function which takes a data and returns a string.</p> <code>None</code> <code>str | None</code> <p>Stroke color value.</p> <code>None</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>float</code> <p>Stroke width value.</p> <code>1</code> Source code in <code>plotynium/marks/axis.py</code> <pre><code>def __init__(\n    self,\n    data: list[T] | None = None,\n    x: Callable[[T], Data] | str | None = None,\n    y: Callable[..., float] | str | None = None,\n    anchor: Literal[\"top\", \"bottom\"] = \"bottom\",\n    label: str | None = None,\n    fill: str | None = None,\n    tick_rotate: float = 0.0,\n    tick_size: int = 6,\n    tick_format: Callable[[T], str] | None = None,\n    stroke: str | None = None,\n    stroke_opacity: float = 1.0,\n    stroke_width: float = 1,\n):\n    Mark.__init__(self)\n    self._data = data or d3.ticks(0, 1, 10)\n    self._x = x or Identity()\n    self._y = None if y is None else getter(y)\n    self._anchor = anchor\n    self._label = label\n    self._fill = fill or \"inherit\"\n    self._tick_rotate = tick_rotate\n    self._tick_size = tick_size\n    self._tick_format = tick_format if callable(tick_format) else Identity()\n    self._stroke = stroke or \"currentColor\"\n    self._stroke_opacity = stroke_opacity\n    self._stroke_width = stroke_width\n\n    self.x_label = self._label\n    self.x_domain = domain(self._data, self._x)\n    self.x_scaler_type = determine_scaler(self._data, self._x)\n</code></pre>"},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(data)","title":"<code>data</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(x)","title":"<code>x</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(y)","title":"<code>y</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(anchor)","title":"<code>anchor</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(label)","title":"<code>label</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(tick_rotate)","title":"<code>tick_rotate</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(tick_size)","title":"<code>tick_size</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(tick_format)","title":"<code>tick_format</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = domain(_data, _x)\n</code></pre>"},{"location":"api/marks/axis_x/#plotynium.marks.AxisX.x_label","title":"x_label  <code>instance-attribute</code>","text":"<pre><code>x_label = _label\n</code></pre>"},{"location":"api/marks/axis_x/#plotynium.marks.AxisX.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_data, _x)\n</code></pre>"},{"location":"api/marks/axis_x/#plotynium.marks.AxisX.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add X axis to SVG content</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/axis.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add X axis to SVG content\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    x = ctx.x\n    y = ctx.y\n\n    dy = (\n        ctx.height - ctx.margin.bottom\n        if self._anchor == \"bottom\"\n        else ctx.margin.top\n    )\n    y = self._y or Constant(dy)\n    dir = -1 if self._anchor == \"top\" else 1\n\n    if hasattr(x, \"get_bandwidth\"):\n        offset = x.get_bandwidth() / 2\n    else:\n        offset = 0\n\n    ticks = (\n        svg.append(\"g\")\n        .attr(\"aria-label\", \"x-axis tick\")\n        .attr(\"stroke\", self._stroke)\n        .attr(\"fill\", self._fill)\n        .select_all(\"path\")\n        .data(self._data)\n        .join(\"path\")\n        .attr(\"transform\", lambda d: f\"translate({x(d) + offset}, {y(d)})\")\n        .attr(\"d\", f\"M0,0L0,{dir * self._tick_size}\")\n    )\n    if self._stroke_opacity != 1.0:\n        ticks.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_width != 1.0:\n        ticks.attr(\"stroke-width\", self._stroke_width)\n\n    (\n        svg.append(\"g\")\n        .attr(\"aria-label\", \"x-axis tick label\")\n        .attr(\"transform\", f\"translate(0, {dir * (self._tick_size + 2.5)})\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"fill\", self._fill)\n        .select_all(\"text\")\n        .data(self._data)\n        .join(\"text\")\n        .attr(\"y\", \"0.71em\" if self._anchor == \"bottom\" else \"0px\")\n        .attr(\"transform\", lambda d: f\"translate({x(d) + offset}, {y(d)})\")\n        .text(lambda d: str(self._tick_format(d)))\n    )\n\n    if self._label is not None:\n        tx = (x.get_range()[0] + x.get_range()[1]) // 2\n        ty = (\n            ctx.height - ctx.margin.bottom // 4\n            if self._anchor == \"bottom\"\n            else ctx.margin.top // 4\n        )\n        (\n            svg.append(\"g\")\n            .attr(\"aria-label\", \"x-axis label\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"fill\", self._fill)\n            .attr(\"transform\", \"translate(0.5, 0)\")\n            .append(\"text\")\n            .attr(\"transform\", f\"translate({tx}, {ty})\")\n            .text(self._label)\n        )\n</code></pre>"},{"location":"api/marks/axis_x/#plotynium.marks.AxisX.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/axis_x/#plotynium.marks.AxisX.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/axis_y/","title":"AxisY","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY","title":"plotynium.marks.AxisY","text":"<pre><code>AxisY(data=None, x=None, y=None, anchor='left', label=None, fill=None, tick_rotate=0.0, tick_size=6, tick_format=None, stroke=None, stroke_opacity=1.0, stroke_width=1)\n</code></pre> <p>Marker for making an Y axis.</p> <p>Parameters:</p> Name Type Description Default <code>list[T] | None</code> <p>List of data for making Y axis</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[..., float] | str | None</code> <p>Y accessor function or key value</p> <code>None</code> <code>Literal['left', 'right']</code> <p>Anchor location, where <code>\"left\"</code> orientates ticks on left side and sets the axis position on the left of the plot whereas <code>\"right\"</code> orientates ticks on right side and sets the axis position on the right.</p> <code>'left'</code> <code>str | None</code> <p>Label of the x axis.</p> <code>None</code> <code>str | None</code> <p>Fill color value.</p> <code>None</code> <code>float</code> <p>Tick rotation value.</p> <code>0.0</code> <code>int</code> <p>Tick size value.</p> <code>6</code> <code>Callable[[T], str] | None</code> <p>Tick format function which takes a data and returns a string.</p> <code>None</code> <code>str | None</code> <p>Stroke color value.</p> <code>None</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>float</code> <p>Stroke width value.</p> <code>1</code> Source code in <code>plotynium/marks/axis.py</code> <pre><code>def __init__(\n    self,\n    data: list[T] | None = None,\n    x: Callable[..., float] | str | None = None,\n    y: Callable[[T], Data] | str | None = None,\n    anchor: Literal[\"left\", \"right\"] = \"left\",\n    label: str | None = None,\n    fill: str | None = None,\n    tick_rotate: float = 0.0,\n    tick_size: int = 6,\n    tick_format: Callable[[T], str] | None = None,\n    stroke: str | None = None,\n    stroke_opacity: float = 1.0,\n    stroke_width: float = 1,\n):\n    Mark.__init__(self)\n    self._data = data or d3.ticks(0, 1, 10)\n    self._x = None if x is None else getter(x)\n    self._y = y or Identity()\n    self._anchor = anchor\n    self._label = label\n    self._fill = fill or \"inherit\"\n    self._tick_rotate = tick_rotate\n    self._tick_size = tick_size\n    self._tick_format = tick_format if callable(tick_format) else Identity()\n    self._stroke = stroke or \"currentColor\"\n    self._stroke_opacity = stroke_opacity\n    self._stroke_width = stroke_width\n\n    self.y_label = self._label\n    self.y_domain = domain(self._data, self._y)\n    self.y_scaler_type = determine_scaler(self._data, self._y)\n</code></pre>"},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(data)","title":"<code>data</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(x)","title":"<code>x</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(y)","title":"<code>y</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(anchor)","title":"<code>anchor</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(label)","title":"<code>label</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(tick_rotate)","title":"<code>tick_rotate</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(tick_size)","title":"<code>tick_size</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(tick_format)","title":"<code>tick_format</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = domain(_data, _y)\n</code></pre>"},{"location":"api/marks/axis_y/#plotynium.marks.AxisY.y_label","title":"y_label  <code>instance-attribute</code>","text":"<pre><code>y_label = _label\n</code></pre>"},{"location":"api/marks/axis_y/#plotynium.marks.AxisY.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = determine_scaler(_data, _y)\n</code></pre>"},{"location":"api/marks/axis_y/#plotynium.marks.AxisY.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add Y axis to SVG content</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/axis.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add Y axis to SVG content\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    x = ctx.x\n    y = ctx.y\n\n    dx = ctx.margin.left if self._anchor == \"left\" else ctx.width - ctx.margin.right\n    x = self._x or Constant(dx)\n    dir = -1 if self._anchor == \"left\" else 1\n\n    if hasattr(y, \"get_bandwidth\"):\n        offset = y.get_bandwidth() / 2\n    else:\n        offset = 0\n\n    ticks = (\n        svg.append(\"g\")\n        .attr(\"aria-label\", \"y-axis tick\")\n        .attr(\"stroke\", self._stroke)\n        .attr(\"fill\", self._fill)\n        .select_all(\"path\")\n        .data(self._data)\n        .join(\"path\")\n        .attr(\"transform\", lambda d: f\"translate({x(d)}, {y(d) + offset})\")\n        .attr(\"d\", f\"M0,0L{dir * self._tick_size},0\")\n    )\n\n    if self._stroke_opacity != 1.0:\n        ticks.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_width != 1.0:\n        ticks.attr(\"stroke-width\", self._stroke_width)\n\n    (\n        svg.append(\"g\")\n        .attr(\"aria-label\", \"y-axis tick label\")\n        .attr(\"transform\", f\"translate({dir * (self._tick_size + 2.5)}, 0)\")\n        .attr(\"text-anchor\", \"end\" if self._anchor == \"left\" else \"start\")\n        .attr(\"fill\", self._fill)\n        .select_all(\"text\")\n        .data(self._data)\n        .join(\"text\")\n        .attr(\"y\", \"0.32em\")\n        .attr(\"transform\", lambda d: f\"translate({x(d)}, {y(d) + offset})\")\n        .text(lambda d: str(self._tick_format(d)))\n    )\n\n    if self._label is not None:\n        tx = -(y.get_range()[0] + y.get_range()[1]) // 2\n        ty = (\n            ctx.margin.left // 4\n            if self._anchor == \"left\"\n            else ctx.width - ctx.margin.right // 4\n        )\n        (\n            svg.append(\"g\")\n            .attr(\"aria-label\", \"y-axis label\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"fill\", self._fill)\n            .attr(\"transform\", \"matrix(0 -1 1 0 0.5 0)\")\n            .append(\"text\")\n            .attr(\"transform\", f\"translate({tx}, {ty})\")\n            .text(self._label)\n        )\n</code></pre>"},{"location":"api/marks/axis_y/#plotynium.marks.AxisY.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/axis_y/#plotynium.marks.AxisY.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/bar_x/","title":"BarX","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX","title":"plotynium.marks.BarX","text":"<pre><code>BarX(data, x=None, y=None, sort=None, fill=None, fill_opacity=1.0, stroke=None, stroke_width=1.0, stroke_opacity=1.0, stroke_dasharray=None, opacity=1.0)\n</code></pre> <p>Marker for drawing horizontal bars based on given data.</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List where bar information are stored.</p> required <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value</p> <code>None</code> <code>SortOptions | dict | None</code> <p>Sort options used for ordering bars</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>fill</code> attribute.</p> <code>None</code> <code>float</code> <p>Fill opacity value included in [0, 1].</p> <code>1.0</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1.0</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> <code>float</code> <p>General opacity value included in [0, 1].</p> <code>1.0</code> Source code in <code>plotynium/marks/bar.py</code> <pre><code>def __init__(\n    self,\n    data: list[T],\n    x: Callable[[T], Data] | str | None = None,\n    y: Callable[[T], Data] | str | None = None,\n    sort: SortOptions | dict | None = None,\n    fill: Callable[[T], str] | str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: Callable[[T], str] | str | None = None,\n    stroke_width: float = 1.0,\n    stroke_opacity: float = 1.0,\n    stroke_dasharray: str | None = None,\n    opacity: float = 1.0,\n):\n    Mark.__init__(self)\n    sort = init_options(sort, SortOptions)\n    if sort.by != \"\":\n        data = sorted(data, key=getter(sort.by))\n        if sort.descending:\n            data = list(reversed(data))\n\n    self._data = data\n    self.x_label = x if isinstance(x, str) else None\n    self.y_label = y if isinstance(y, str) else None\n    self._x = getter(x or 0)\n    self._y = getter(y or 1)\n\n    self.x_domain = domain(self._data, self._x)\n    self.y_domain = domain(self._data, self._y)\n    self.x_scaler_type = determine_scaler(self._data, self._x)\n    self.y_scaler_type = determine_scaler(self._data, self._y)\n\n    Style.__init__(\n        self,\n        data=data,\n        default_fill=\"black\",\n        default_stroke=\"none\",\n        fill=fill,\n        fill_opacity=fill_opacity,\n        stroke=stroke,\n        stroke_width=stroke_width,\n        stroke_opacity=stroke_opacity,\n        stroke_dasharray=stroke_dasharray,\n        opacity=opacity,\n    )\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX(data)","title":"<code>data</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(x)","title":"<code>x</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(y)","title":"<code>y</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(sort)","title":"<code>sort</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX(opacity)","title":"<code>opacity</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = domain(_data, _x)\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX.x_label","title":"x_label  <code>instance-attribute</code>","text":"<pre><code>x_label = x if isinstance(x, str) else None\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_data, _x)\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = domain(_data, _y)\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX.y_label","title":"y_label  <code>instance-attribute</code>","text":"<pre><code>y_label = y if isinstance(y, str) else None\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = determine_scaler(_data, _y)\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add vertical bars on SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/bar.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add vertical bars on SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    group = svg.append(\"g\").attr(\"class\", \"bars\")\n\n    if self._opacity != 1.0:\n        group.attr(\"opacity\", self._opacity)\n    if self._stroke_opacity != 1.0:\n        group.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_dasharray is not None:\n        group.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._fill_opacity != 1.0:\n        group.attr(\"fill-opacity\", self._fill_opacity)\n\n    (\n        group.select_all()\n        .data(self._data)\n        .join(\"rect\")\n        .attr(\"x\", ctx.x(ctx.x.get_domain()[0]))\n        .attr(\"y\", lambda d: ctx.y(self._y(d)))\n        .attr(\"width\", lambda d: ctx.x(self._x(d)) - ctx.x(0))\n        .attr(\"height\", ctx.y.get_bandwidth())\n        .attr(\"fill\", self._fill)\n        .attr(\"stroke\", self._stroke)\n        .attr(\"stroke-width\", self._stroke_width)\n    )\n</code></pre>"},{"location":"api/marks/bar_x/#plotynium.marks.BarX.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/bar_x/#plotynium.marks.BarX.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/bar_y/","title":"BarY","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY","title":"plotynium.marks.BarY","text":"<pre><code>BarY(data, x=None, y=None, sort=None, fill=None, fill_opacity=1.0, stroke=None, stroke_width=1.0, stroke_opacity=1.0, stroke_dasharray=None, opacity=1.0)\n</code></pre> <p>Marker for drawing vertical bars based on given data.</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List where bar information are stored.</p> required <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value</p> <code>None</code> <code>SortOptions | dict | None</code> <p>Sort options used for ordering bars</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>fill</code> attribute.</p> <code>None</code> <code>float</code> <p>Fill opacity value included in [0, 1].</p> <code>1.0</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1.0</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> <code>float</code> <p>General opacity value included in [0, 1].</p> <code>1.0</code> Source code in <code>plotynium/marks/bar.py</code> <pre><code>def __init__(\n    self,\n    data: list[T],\n    x: Callable[[T], Data] | str | None = None,\n    y: Callable[[T], Data] | str | None = None,\n    sort: SortOptions | dict | None = None,\n    fill: Callable[[T], str] | str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: Callable[[T], str] | str | None = None,\n    stroke_width: float = 1.0,\n    stroke_opacity: float = 1.0,\n    stroke_dasharray: str | None = None,\n    opacity: float = 1.0,\n):\n    Mark.__init__(self)\n    sort = init_options(sort, SortOptions)\n    if sort.by != \"\":\n        data = sorted(data, key=getter(sort.by))\n        if sort.descending:\n            data = list(reversed(data))\n\n    self._data = data\n    self.x_label = x if isinstance(x, str) else None\n    self.y_label = y if isinstance(y, str) else None\n    self._x = getter(x or 0)\n    self._y = getter(y or 1)\n\n    self.x_domain = domain(self._data, self._x)\n    self.y_domain = domain(self._data, self._y)\n    self.x_scaler_type = determine_scaler(self._data, self._x)\n    self.y_scaler_type = determine_scaler(self._data, self._y)\n\n    Style.__init__(\n        self,\n        data=data,\n        default_fill=\"black\",\n        default_stroke=\"none\",\n        fill=fill,\n        fill_opacity=fill_opacity,\n        stroke=stroke,\n        stroke_width=stroke_width,\n        stroke_opacity=stroke_opacity,\n        stroke_dasharray=stroke_dasharray,\n        opacity=opacity,\n    )\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY(data)","title":"<code>data</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(x)","title":"<code>x</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(y)","title":"<code>y</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(sort)","title":"<code>sort</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY(opacity)","title":"<code>opacity</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = domain(_data, _x)\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY.x_label","title":"x_label  <code>instance-attribute</code>","text":"<pre><code>x_label = x if isinstance(x, str) else None\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_data, _x)\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = domain(_data, _y)\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY.y_label","title":"y_label  <code>instance-attribute</code>","text":"<pre><code>y_label = y if isinstance(y, str) else None\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = determine_scaler(_data, _y)\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add vertical bars on SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/bar.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add vertical bars on SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    group = svg.append(\"g\").attr(\"class\", \"bars\")\n\n    if self._opacity != 1.0:\n        group.attr(\"opacity\", self._opacity)\n    if self._stroke_opacity != 1.0:\n        group.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_dasharray is not None:\n        group.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._fill_opacity != 1.0:\n        group.attr(\"fill-opacity\", self._fill_opacity)\n\n    (\n        group.select_all()\n        .data(self._data)\n        .join(\"rect\")\n        .attr(\"x\", lambda d: ctx.x(self._x(d)))\n        .attr(\"y\", lambda d: ctx.y(self._y(d)))\n        .attr(\"height\", lambda d: ctx.y(0) - ctx.y(self._y(d)))\n        .attr(\"width\", ctx.x.get_bandwidth())\n        .attr(\"fill\", self._fill)\n        .attr(\"stroke\", self._stroke)\n        .attr(\"stroke-width\", self._stroke_width)\n    )\n</code></pre>"},{"location":"api/marks/bar_y/#plotynium.marks.BarY.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/bar_y/#plotynium.marks.BarY.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/dot/","title":"Dot","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot","title":"plotynium.marks.Dot","text":"<pre><code>Dot(data, x=None, y=None, r=None, symbol=None, fill=None, fill_opacity=1.0, stroke=None, stroke_width=1.5, stroke_opacity=1.0, stroke_dasharray=None, opacity=1.0)\n</code></pre> <p>Marker for add dots (as symbols or circles) given point coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List where points coordinates are stored.</p> required <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value</p> <code>None</code> <code>Callable[[T], float] | str | None</code> <p>Key value or function which returns circle radius given data.</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Key value or function which returns symbol path given data.</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>fill</code> attribute.</p> <code>None</code> <code>float</code> <p>Fill opacity value included in [0, 1].</p> <code>1.0</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1.5</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> <code>float</code> <p>General opacity value included in [0, 1].</p> <code>1.0</code> Source code in <code>plotynium/marks/dot.py</code> <pre><code>def __init__(\n    self,\n    data: list[T],\n    x: Callable[[T], Data] | str | None = None,\n    y: Callable[[T], Data] | str | None = None,\n    r: Callable[[T], float] | float | None = None,\n    symbol: Callable[[T], str] | str | None = None,\n    fill: Callable[[T], str] | str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: Callable[[T], str] | str | None = None,\n    stroke_width: float = 1.5,\n    stroke_opacity: float = 1.0,\n    stroke_dasharray: str | None = None,\n    opacity: float = 1.0,\n):\n    Mark.__init__(self)\n    self._data = data\n    self.x_label = x if isinstance(x, str) else None\n    self.y_label = y if isinstance(y, str) else None\n    self._x = getter(x or 0)\n    self._y = getter(y or 1)\n\n    self.x_domain = domain(self._data, self._x)\n    self.y_domain = domain(self._data, self._y)\n    self.x_scaler_type = determine_scaler(self._data, self._x)\n    self.y_scaler_type = determine_scaler(self._data, self._y)\n\n    self._r = r if callable(r) else Constant(r or 3)\n    self._symbol = Symbol.try_init(data, symbol)\n\n    Style.__init__(\n        self,\n        data=data,\n        default_fill=\"none\",\n        default_stroke=\"black\",\n        fill=fill,\n        fill_opacity=fill_opacity,\n        stroke=stroke,\n        stroke_width=stroke_width,\n        stroke_opacity=stroke_opacity,\n        stroke_dasharray=stroke_dasharray,\n        opacity=opacity,\n    )\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot(data)","title":"<code>data</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(x)","title":"<code>x</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(y)","title":"<code>y</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(r)","title":"<code>r</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(symbol)","title":"<code>symbol</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot(opacity)","title":"<code>opacity</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = domain(_data, _x)\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot.x_label","title":"x_label  <code>instance-attribute</code>","text":"<pre><code>x_label = x if isinstance(x, str) else None\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_data, _x)\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = domain(_data, _y)\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot.y_label","title":"y_label  <code>instance-attribute</code>","text":"<pre><code>y_label = y if isinstance(y, str) else None\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = determine_scaler(_data, _y)\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add circles or symbols on the SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/dot.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add circles or symbols on the SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG content\n    ctx : Context\n        Context\n    \"\"\"\n    self.set_colorscheme(ctx.color_scheme)\n    self.set_labels(ctx.labels)\n    x = center(ctx.x)\n    y = center(ctx.y)\n    if isinstance(self._symbol, Identity):\n        group = svg.append(\"g\").attr(\"class\", \"dots\")\n\n        if self._opacity != 1.0:\n            group.attr(\"opacity\", self._opacity)\n        if self._stroke_opacity != 1.0:\n            group.attr(\"stroke-opacity\", self._stroke_opacity)\n        if self._stroke_dasharray is not None:\n            group.attr(\"stroke-dasharray\", self._stroke_dasharray)\n        if self._fill_opacity != 1.0:\n            group.attr(\"fill-opacity\", self._fill_opacity)\n\n        (\n            group.select_all(\"circle\")\n            .data(self._data)\n            .join(\"circle\")\n            .attr(\"cx\", lambda d: x(self._x(d)))\n            .attr(\"cy\", lambda d: y(self._y(d)))\n            .attr(\"stroke\", self._stroke)\n            .attr(\"fill\", self._fill)\n            .attr(\"stroke-width\", self._stroke_width)\n            .attr(\"r\", self._r)\n        )\n    else:\n        group = svg.append(\"g\").attr(\"class\", \"dots\")\n\n        if self._opacity != 1.0:\n            group.attr(\"opacity\", self._opacity)\n        if self._stroke_opacity != 1.0:\n            group.attr(\"stroke-opacity\", self._stroke_opacity)\n        if self._stroke_dasharray is not None:\n            group.attr(\"stroke-dasharray\", self._stroke_dasharray)\n        if self._fill_opacity != 1.0:\n            group.attr(\"fill-opacity\", self._fill_opacity)\n\n        (\n            group.select_all(\"symbol\")\n            .data(self._data)\n            .join(\"g\")\n            .attr(\n                \"transform\",\n                lambda d: f\"translate({x(self._x(d))}, {y(self._y(d))})\",\n            )\n            .append(\"path\")\n            .attr(\"d\", self._symbol)\n            .attr(\"stroke\", self._stroke)\n            .attr(\"fill\", self._fill)\n            .attr(\"stroke-width\", self._stroke_width)\n        )\n        ctx.update_symbol_mapping(self._symbol.get_mapping())\n    ctx.update_color_mapping(\n        self._stroke.get_mapping(),\n        self._fill.get_mapping(),\n    )\n</code></pre>"},{"location":"api/marks/dot/#plotynium.marks.Dot.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/dot/#plotynium.marks.Dot.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/grid_x/","title":"GridX","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX","title":"plotynium.marks.GridX","text":"<pre><code>GridX(data=None, x=None, y1=None, y2=None, stroke=None, stroke_opacity=0.1, stroke_width=1, stroke_dasharray=None)\n</code></pre> <p>Marker for adding vertical lines from x ticks.</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List of x positions where vertical lines will be placed.</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value for tail coordinates of the lines</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value for head coordinates of the lines</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>0.1</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> Source code in <code>plotynium/marks/grid.py</code> <pre><code>def __init__(\n    self,\n    data: list[T] | None = None,\n    x: Callable[[T], Data] | str | None = None,\n    y1: Callable[[T], Data] | None = None,\n    y2: Callable[[T], Data] | None = None,\n    stroke: str | None = None,\n    stroke_opacity: float = 0.1,\n    stroke_width: float = 1,\n    stroke_dasharray: str | None = None,\n):\n    Mark.__init__(self)\n    self._data = data or d3.ticks(0, 1, 10)\n    self._x = x or Identity()\n    self._y1 = y1\n    self._y2 = y2\n    self._stroke = stroke or \"currentColor\"\n    self._stroke_opacity = stroke_opacity\n    self._stroke_width = stroke_width\n    self._stroke_dasharray = stroke_dasharray\n\n    self.x_domain = domain(self._data, self._x)\n    self.x_scaler_type = determine_scaler(self._data, self._x)\n</code></pre>"},{"location":"api/marks/grid_x/#plotynium.marks.GridX(data)","title":"<code>data</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX(x)","title":"<code>x</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX(y1)","title":"<code>y1</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX(y2)","title":"<code>y2</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = domain(_data, _x)\n</code></pre>"},{"location":"api/marks/grid_x/#plotynium.marks.GridX.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_data, _x)\n</code></pre>"},{"location":"api/marks/grid_x/#plotynium.marks.GridX.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add vertical lines from x ticks.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/grid.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add vertical lines from x ticks.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx: Context\n        Context\n    \"\"\"\n    height = ctx.height\n    margin_top = ctx.margin.top\n    margin_bottom = ctx.margin.bottom\n    y1 = self._y1 or Constant(margin_top)\n    y2 = self._y2 or Constant(height - margin_bottom)\n    g = svg.append(\"g\").attr(\"aria-label\", \"x-grid\").attr(\"stroke\", self._stroke)\n    if self._stroke_width:\n        g.attr(\"stroke_width\", self._stroke_width)\n    if self._stroke_dasharray:\n        g.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._stroke_opacity:\n        g.attr(\"stroke-opacity\", self._stroke_opacity)\n\n    (\n        g.select_all(\"line\")\n        .data(self._data)\n        .join(\"line\")\n        .attr(\"x1\", lambda d: ctx.x(d))\n        .attr(\"x2\", lambda d: ctx.x(d))\n        .attr(\"y1\", y1)\n        .attr(\"y2\", y2)\n    )\n</code></pre>"},{"location":"api/marks/grid_x/#plotynium.marks.GridX.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/grid_x/#plotynium.marks.GridX.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/grid_y/","title":"GridY","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY","title":"plotynium.marks.GridY","text":"<pre><code>GridY(data=None, x1=None, x2=None, y=None, stroke=None, stroke_opacity=0.1, stroke_width=1, stroke_dasharray=None)\n</code></pre> <p>Marker for adding horizontal lines from y ticks.</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List of y positions where horizontal lines will be placed.</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value for tail coordinates of the lines</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value for head coordinates of the lines</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>0.1</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> Source code in <code>plotynium/marks/grid.py</code> <pre><code>def __init__(\n    self,\n    data: list[T] | None = None,\n    x1: Callable[[T], Data] | None = None,\n    x2: Callable[[T], Data] | None = None,\n    y: Callable[[T], Data] | str | None = None,\n    stroke: str | None = None,\n    stroke_opacity: float = 0.1,\n    stroke_width: float = 1,\n    stroke_dasharray: str | None = None,\n):\n    Mark.__init__(self)\n    self._data = data or d3.ticks(0, 1, 10)\n    self._x1 = x1\n    self._x2 = x2\n    self._y = y or Identity()\n    self._stroke = stroke or \"currentColor\"\n    self._stroke_opacity = stroke_opacity\n    self._stroke_width = stroke_width\n    self._stroke_dasharray = stroke_dasharray\n\n    self.y_domain = domain(self._data, self._y)\n    self.y_scaler_type = determine_scaler(self._data, self._y)\n</code></pre>"},{"location":"api/marks/grid_y/#plotynium.marks.GridY(data)","title":"<code>data</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY(x1)","title":"<code>x1</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY(x2)","title":"<code>x2</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY(y)","title":"<code>y</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = domain(_data, _y)\n</code></pre>"},{"location":"api/marks/grid_y/#plotynium.marks.GridY.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = determine_scaler(_data, _y)\n</code></pre>"},{"location":"api/marks/grid_y/#plotynium.marks.GridY.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add horizontal lines from y ticks.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/grid.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add horizontal lines from y ticks.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    width = ctx.width\n    margin_right = ctx.margin.right\n    margin_left = ctx.margin.left\n    x1 = self._x1 or Constant(margin_left)\n    x2 = self._x2 or Constant(width - margin_right)\n    g = svg.append(\"g\").attr(\"aria-label\", \"y-grid\").attr(\"stroke\", self._stroke)\n    if self._stroke_width:\n        g.attr(\"stroke_width\", self._stroke_width)\n    if self._stroke_dasharray:\n        g.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._stroke_opacity:\n        g.attr(\"stroke-opacity\", self._stroke_opacity)\n\n    (\n        g.select_all(\"line\")\n        .data(self._data)\n        .join(\"line\")\n        .attr(\"x1\", x1)\n        .attr(\"x2\", x2)\n        .attr(\"y1\", lambda d: ctx.y(d))\n        .attr(\"y2\", lambda d: ctx.y(d))\n    )\n</code></pre>"},{"location":"api/marks/grid_y/#plotynium.marks.GridY.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/grid_y/#plotynium.marks.GridY.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/legend/","title":"Legend","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend","title":"plotynium.legends.Legend","text":"<pre><code>Legend(color_mapping=None, symbol_mapping=None, scheme=None, square_size=15, symbol_size=5, fill=None, fill_opacity=1.0, stroke=None, stroke_opacity=1.0, stroke_width=1.0, font_size=12, width=240, height=50, margin_top=21, margin_left=15, margin_bottom=21, margin_right=15)\n</code></pre> <p>Special mark which has its own definition for making a legend. Legend is located on top of the main canvas where all other marks are applied. Given the value of <code>color_mapping</code> and <code>symbol_mapping</code> arguments, this class takes decision to know if the legend should be continuous, discrete with squares or discrete with symbols.</p> <p>Parameters:</p> Name Type Description Default <code>list[tuple[str, str]] | None</code> <p>List of pairs (label, color)</p> <code>None</code> <code>list[tuple[str, str]] | None</code> <p>List of pairs (label, symbol path)</p> <code>None</code> <code>ColorScheme | None</code> <p>Color scheme</p> <code>None</code> <code>int</code> <p>Square_size (only for discrete legend)</p> <code>15</code> <code>int</code> <p>Symbol size (only for symbol legend)</p> <code>5</code> <code>str | None</code> <p>Fill color for text</p> <code>None</code> <code>float</code> <p>Fill opacity</p> <code>1.0</code> <code>str | None</code> <p>Stroke color for text</p> <code>None</code> <code>float</code> <p>Stroke opacity</p> <code>1.0</code> <code>float</code> <p>Stroke width (only for continuous legend)</p> <code>1.0</code> <code>int</code> <p>Font size for text</p> <code>12</code> <code>int</code> <p>Width size</p> <code>240</code> <code>int</code> <p>Height size</p> <code>50</code> <code>int</code> <p>Margin top value</p> <code>21</code> <code>int</code> <p>Margin left value</p> <code>15</code> <code>int</code> <p>Margin bottom value</p> <code>21</code> <code>int</code> <p>Margin right value</p> <code>15</code> Source code in <code>plotynium/legends/__init__.py</code> <pre><code>def __init__(\n    self,\n    color_mapping: list[tuple[str, str]] | None = None,\n    symbol_mapping: list[tuple[str, str]] | None = None,\n    scheme: ColorScheme | None = None,\n    square_size: int = 15,\n    symbol_size: int = 5,\n    fill: str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: str | None = None,\n    stroke_opacity: float = 1.0,\n    stroke_width: float = 1.0,\n    font_size: int = 12,\n    width: int = 240,\n    height: int = 50,\n    margin_top: int = 21,\n    margin_left: int = 15,\n    margin_bottom: int = 21,\n    margin_right: int = 15,\n):\n    Mark.__init__(self)\n    self._color_mapping = color_mapping or [\n        (str(x), \"none\") for x in d3.ticks(0, 1, 10)\n    ]\n    self._symbol_mapping = symbol_mapping or []\n    self._scheme = scheme\n    self._square_size = square_size\n    self._symbol_size = symbol_size\n    self._fill = Constant(fill or \"currentColor\")\n    self._fill_opacity = fill_opacity\n    self._stroke = Constant(stroke or \"currentColor\")\n    self._stroke_opacity = stroke_opacity\n    self._stroke_width = stroke_width\n    self._font_size = font_size\n    self._properties = LegendProperties.new(\n        width,\n        height,\n        margin_top,\n        margin_left,\n        margin_bottom,\n        margin_right,\n    )\n</code></pre>"},{"location":"api/marks/legend/#plotynium.legends.Legend(color_mapping)","title":"<code>color_mapping</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(symbol_mapping)","title":"<code>symbol_mapping</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(scheme)","title":"<code>scheme</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(square_size)","title":"<code>square_size</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(symbol_size)","title":"<code>symbol_size</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(font_size)","title":"<code>font_size</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(width)","title":"<code>width</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(height)","title":"<code>height</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(margin_top)","title":"<code>margin_top</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(margin_left)","title":"<code>margin_left</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(margin_bottom)","title":"<code>margin_bottom</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend(margin_right)","title":"<code>margin_right</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend.properties","title":"properties  <code>property</code>","text":"<pre><code>properties\n</code></pre> <p>Returns its properties</p> <p>Returns:</p> Type Description <code>LegendProperties</code> <p>Own properties</p>"},{"location":"api/marks/legend/#plotynium.legends.Legend.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Adds a legend on SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/legends/__init__.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Adds a legend on SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    # Updates attributes from context\n    self._properties = ctx.legend_properties\n    self._font_size = ctx.font_size\n    self._scheme = (\n        self._scheme\n        or ctx.color_scheme\n        or default_colorscheme(len(self._color_mapping))\n    )\n\n    # Adds the legend on the SVG given arguments\n    if len(self._symbol_mapping) &gt; 0:\n        self.symbol_legend(svg)\n    elif len(self._color_mapping) &gt; 10:\n        self.continuous_color_legend(svg)\n    else:\n        self.discrete_color_legend(svg)\n</code></pre>"},{"location":"api/marks/legend/#plotynium.legends.Legend.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/legend/#plotynium.legends.Legend.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/line/","title":"Line","text":""},{"location":"api/marks/line/#plotynium.marks.Line","title":"plotynium.marks.Line","text":"<pre><code>Line(data, x=None, y=None, fill=None, fill_opacity=1.0, stroke=None, stroke_width=1.0, stroke_opacity=1.0, stroke_dasharray=None, opacity=1.0)\n</code></pre> <p>Marker for drawing lines between point coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List where point coordinates are stored.</p> required <code>Callable[[T], Data] | str | None</code> <p>X accessor function or key value</p> <code>None</code> <code>Callable[[T], Data] | str | None</code> <p>Y accessor function or key value</p> <code>None</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>fill</code> attribute.</p> <code>None</code> <code>float</code> <p>Fill opacity value included in [0, 1].</p> <code>1.0</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1.0</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> <code>float</code> <p>General opacity value included in [0, 1].</p> <code>1.0</code> Source code in <code>plotynium/marks/line.py</code> <pre><code>def __init__(\n    self,\n    data: list[T],\n    x: Callable[[T], Data] | str | None = None,\n    y: Callable[[T], Data] | str | None = None,\n    fill: Callable[[T], str] | str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: Callable[[T], str] | str | None = None,\n    stroke_width: float = 1.0,\n    stroke_opacity: float = 1.0,\n    stroke_dasharray: str | None = None,\n    opacity: float = 1.0,\n):\n    Mark.__init__(self)\n    self._data = data\n\n    self.x_label = x if isinstance(x, str) else None\n    self.y_label = y if isinstance(y, str) else None\n    self._x = getter(x or 0)\n    self._y = getter(y or 1)\n\n    self.x_domain = domain(self._data, self._x)\n    self.y_domain = domain(self._data, self._y)\n    self.x_scaler_type = determine_scaler(self._data, self._x)\n    self.y_scaler_type = determine_scaler(self._data, self._y)\n\n    Style.__init__(\n        self,\n        data=data,\n        default_fill=\"none\",\n        default_stroke=\"black\",\n        fill=fill,\n        fill_opacity=fill_opacity,\n        stroke=stroke,\n        stroke_width=stroke_width,\n        stroke_opacity=stroke_opacity,\n        stroke_dasharray=stroke_dasharray,\n        opacity=opacity,\n    )\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line(data)","title":"<code>data</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(x)","title":"<code>x</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(y)","title":"<code>y</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line(opacity)","title":"<code>opacity</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = domain(_data, _x)\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line.x_label","title":"x_label  <code>instance-attribute</code>","text":"<pre><code>x_label = x if isinstance(x, str) else None\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_data, _x)\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = domain(_data, _y)\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line.y_label","title":"y_label  <code>instance-attribute</code>","text":"<pre><code>y_label = y if isinstance(y, str) else None\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = determine_scaler(_data, _y)\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Adds lines from stored points on SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/line.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Adds lines from stored points on SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx : Context\n        Context\n    \"\"\"\n    self.set_colorscheme(ctx.color_scheme)\n    self.set_labels(ctx.labels)\n    line = (\n        d3.line()\n        .x(\n            (lambda d: ctx.x(self._x(d)))\n            if self.x_scaler_type == Scaler.CONTINUOUS\n            else (lambda d: ctx.x(self._x(d).timestamp()))\n        )\n        .y(lambda d: ctx.y(self._y(d)))\n    )\n\n    group = svg.append(\"g\").attr(\"class\", \"line\")\n\n    if self._opacity != 1.0:\n        group.attr(\"opacity\", self._opacity)\n    if self._stroke_opacity != 1.0:\n        group.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_dasharray is not None:\n        group.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._fill_opacity != 1.0:\n        group.attr(\"fill-opacity\", self._fill_opacity)\n\n    (\n        group.select_all(\"path\")\n        .data(self.group())\n        .enter()\n        .append(\"path\")\n        .attr(\"fill\", lambda d: d[\"fill\"])\n        .attr(\"stroke\", lambda d: d[\"stroke\"])\n        .attr(\"stroke-width\", self._stroke_width)\n        .attr(\"d\", lambda d: line(d[\"values\"]))\n    )\n    ctx.update_color_mapping(\n        self._stroke.get_mapping(),\n        self._fill.get_mapping(),\n    )\n</code></pre>"},{"location":"api/marks/line/#plotynium.marks.Line.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/line/#plotynium.marks.Line.group","title":"group","text":"<pre><code>group()\n</code></pre> <p>Groups data according to their stroke and fill values.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of groups defined as dictionaries where: * the key <code>\"stroke\"</code> is the stroke value of the group * the key <code>\"fill\"</code> is the fill value of the group * the key <code>\"values\"</code> is a list of grouped data which has the same stroke and fill values</p> Source code in <code>plotynium/marks/line.py</code> <pre><code>def group(self) -&gt; list[dict]:\n    \"\"\"\n    Groups data according to their *stroke* and *fill* values.\n\n    Returns\n    -------\n    list[dict]\n        List of groups defined as dictionaries where:\n        * the key `\"stroke\"` is the stroke value of the group\n        * the key `\"fill\"` is the fill value of the group\n        * the key `\"values\"` is a list of grouped data which has the same *stroke* and *fill* values\n    \"\"\"\n    groups = {}\n    for d in self._data:\n        crits = {\"stroke\": self._stroke(d), \"fill\": self._fill(d)}\n        _, values = groups.setdefault(tuple(crits.values()), (crits, []))\n        values.append(d)\n    return [crits | {\"values\": values} for crits, values in groups.values()]\n</code></pre>"},{"location":"api/marks/mark/","title":"Mark","text":""},{"location":"api/marks/mark/#plotynium.marks.Mark","title":"plotynium.marks.Mark","text":"<pre><code>Mark()\n</code></pre> <p>Description of what should be a <code>Mark</code>. Since <code>plot</code> takes a list of marks, its attributes will be mixed with other marks in order to generate a plot with single characteristics such as label values, domain values and scaler types.</p> Source code in <code>plotynium/marks/mark.py</code> <pre><code>def __init__(self):\n    self.x_label: str | None = None\n    self.y_label: str | None = None\n    self.x_domain: tuple[Number, Number] | list[str] | None = None\n    self.y_domain: tuple[Number, Number] | list[str] | None = None\n    self.x_scaler_type: Scaler | None = None\n    self.y_scaler_type: Scaler | None = None\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = None\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.x_label","title":"x_label  <code>instance-attribute</code>","text":"<pre><code>x_label = None\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = None\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = None\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.y_label","title":"y_label  <code>instance-attribute</code>","text":"<pre><code>y_label = None\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = None\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.apply","title":"apply  <code>abstractmethod</code>","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Method which is called by <code>plot</code> and which should change <code>svg</code> content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG content defined by a <code>Selection</code> class from <code>detroit</code></p> required <code>Context</code> <p>SVG context containing shared data between marks</p> required Source code in <code>plotynium/marks/mark.py</code> <pre><code>@abstractmethod\ndef apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Method which is called by `plot` and which should change `svg` content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG content defined by a `Selection` class from `detroit`\n    ctx : Context\n        SVG context containing shared data between marks\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/marks/mark/#plotynium.marks.Mark.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/mark/#plotynium.marks.Mark.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/rule_x/","title":"RuleX","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX","title":"plotynium.marks.RuleX","text":"<pre><code>RuleX(x, fill=None, fill_opacity=1.0, stroke=None, stroke_width=1.5, stroke_opacity=1.0, stroke_dasharray=None, opacity=1.0)\n</code></pre> <p>Marker for adding vertical lines given a list of x positions</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List of x positions where vertical lines will be placed.</p> required <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>fill</code> attribute.</p> <code>None</code> <code>float</code> <p>Fill opacity value included in [0, 1].</p> <code>1.0</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1.5</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> <code>float</code> <p>General opacity value included in [0, 1].</p> <code>1.0</code> Source code in <code>plotynium/marks/rule.py</code> <pre><code>def __init__(\n    self,\n    x: list[T],\n    fill: Callable[[T], str] | str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: Callable[[T], str] | str | None = None,\n    stroke_width: float = 1.5,\n    stroke_opacity: float = 1.0,\n    stroke_dasharray: str | None = None,\n    opacity: float = 1.0,\n):\n    Mark.__init__(self)\n    self._values = list(x)\n    self._x = getter(0)\n    self._y = getter(1)\n\n    self.x_domain = [min(self._values), max(self._values)]\n    self.x_scaler_type = determine_scaler(self._values, Identity())\n\n    Style.__init__(\n        self,\n        data=[],\n        default_fill=\"none\",\n        default_stroke=\"currentColor\",\n        fill=fill,\n        fill_opacity=fill_opacity,\n        stroke=stroke,\n        stroke_width=stroke_width,\n        stroke_opacity=stroke_opacity,\n        stroke_dasharray=stroke_dasharray,\n        opacity=opacity,\n    )\n</code></pre>"},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(x)","title":"<code>x</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX(opacity)","title":"<code>opacity</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX.x_domain","title":"x_domain  <code>instance-attribute</code>","text":"<pre><code>x_domain = [min(_values), max(_values)]\n</code></pre>"},{"location":"api/marks/rule_x/#plotynium.marks.RuleX.x_scaler_type","title":"x_scaler_type  <code>instance-attribute</code>","text":"<pre><code>x_scaler_type = determine_scaler(_values, Identity())\n</code></pre>"},{"location":"api/marks/rule_x/#plotynium.marks.RuleX.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add horizontal lines on SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/rule.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add horizontal lines on SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx: Context\n        Context\n    \"\"\"\n    line = (\n        d3.line()\n        .x(\n            (lambda d: ctx.x(self._x(d).timestamp()))\n            if self.x_scaler_type == Scaler.TIME\n            else lambda d: ctx.x(self._x(d))\n        )\n        .y(lambda d: ctx.y(self._y(d)))\n    )\n    values = [\n        [[v, ctx.y.get_domain()[0]], [v, ctx.y.get_domain()[1]]]\n        for v in self._values\n    ]\n    group = svg.append(\"g\").attr(\"class\", \"rule\")\n\n    if self._opacity != 1.0:\n        group.attr(\"opacity\", self._opacity)\n    if self._stroke_opacity != 1.0:\n        group.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_dasharray is not None:\n        group.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._fill_opacity != 1.0:\n        group.attr(\"fill-opacity\", self._fill_opacity)\n\n    (\n        group.select_all(\"rule\")\n        .data(values)\n        .join(\"path\")\n        .attr(\"stroke\", self._stroke)\n        .attr(\"fill\", self._fill)\n        .attr(\"stroke-width\", self._stroke_width)\n        .attr(\"d\", lambda d: line(d))\n    )\n</code></pre>"},{"location":"api/marks/rule_x/#plotynium.marks.RuleX.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/rule_x/#plotynium.marks.RuleX.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"api/marks/rule_y/","title":"RuleY","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY","title":"plotynium.marks.RuleY","text":"<pre><code>RuleY(y, fill=None, fill_opacity=1.0, stroke=None, stroke_width=1.5, stroke_opacity=1.0, stroke_dasharray=None, opacity=1.0)\n</code></pre> <p>Marker for adding horizontal lines given a list of y positions</p> <p>Parameters:</p> Name Type Description Default <code>list[T]</code> <p>List of y positions where horizontal lines will be placed.</p> required <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>fill</code> attribute.</p> <code>None</code> <code>float</code> <p>Fill opacity value included in [0, 1].</p> <code>1.0</code> <code>Callable[[T], str] | str | None</code> <p>Function which takes a data and returns a color applied for <code>stroke</code> attribute.</p> <code>None</code> <code>float</code> <p>Stroke width value.</p> <code>1.5</code> <code>float</code> <p>Stroke opacity value included in [0, 1].</p> <code>1.0</code> <code>str | None</code> <p>Stroke dasharray value.</p> <code>None</code> <code>float</code> <p>General opacity value included in [0, 1].</p> <code>1.0</code> Source code in <code>plotynium/marks/rule.py</code> <pre><code>def __init__(\n    self,\n    y: list[T],\n    fill: Callable[[T], str] | str | None = None,\n    fill_opacity: float = 1.0,\n    stroke: Callable[[T], str] | str | None = None,\n    stroke_width: float = 1.5,\n    stroke_opacity: float = 1.0,\n    stroke_dasharray: str | None = None,\n    opacity: float = 1.0,\n):\n    Mark.__init__(self)\n    self._values = list(y)\n    self._x = getter(0)\n    self._y = getter(1)\n\n    self.y_domain = [min(self._values), max(self._values)]\n    self.y_scaler_type = determine_scaler(self._values, Identity())\n\n    Style.__init__(\n        self,\n        data=[],\n        default_fill=\"none\",\n        default_stroke=\"currentColor\",\n        fill=fill,\n        fill_opacity=fill_opacity,\n        stroke=stroke,\n        stroke_width=stroke_width,\n        stroke_opacity=stroke_opacity,\n        stroke_dasharray=stroke_dasharray,\n        opacity=opacity,\n    )\n</code></pre>"},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(y)","title":"<code>y</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(fill)","title":"<code>fill</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(fill_opacity)","title":"<code>fill_opacity</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(stroke)","title":"<code>stroke</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(stroke_width)","title":"<code>stroke_width</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(stroke_opacity)","title":"<code>stroke_opacity</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(stroke_dasharray)","title":"<code>stroke_dasharray</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY(opacity)","title":"<code>opacity</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY.y_domain","title":"y_domain  <code>instance-attribute</code>","text":"<pre><code>y_domain = [min(_values), max(_values)]\n</code></pre>"},{"location":"api/marks/rule_y/#plotynium.marks.RuleY.y_scaler_type","title":"y_scaler_type  <code>instance-attribute</code>","text":"<pre><code>y_scaler_type = determine_scaler(_values, Identity())\n</code></pre>"},{"location":"api/marks/rule_y/#plotynium.marks.RuleY.apply","title":"apply","text":"<pre><code>apply(svg, ctx)\n</code></pre> <p>Add horizontal lines on SVG content.</p> <p>Parameters:</p> Name Type Description Default <code>Selection</code> <p>SVG Content</p> required <code>Context</code> <p>Context</p> required Source code in <code>plotynium/marks/rule.py</code> <pre><code>def apply(self, svg: Selection, ctx: Context):\n    \"\"\"\n    Add horizontal lines on SVG content.\n\n    Parameters\n    ----------\n    svg : Selection\n        SVG Content\n    ctx: Context\n        Context\n    \"\"\"\n    line = (\n        d3.line()\n        .x(lambda d: ctx.x(self._x(d)))\n        .y(\n            (lambda d: ctx.y(self._y(d).timestamp()))\n            if self.y_scaler_type == Scaler.TIME\n            else lambda d: ctx.y(self._y(d))\n        )\n    )\n    values = [\n        [[ctx.x.get_domain()[0], v], [ctx.x.get_domain()[1], v]]\n        for v in self._values\n    ]\n    group = svg.append(\"g\").attr(\"class\", \"rule\")\n\n    if self._opacity != 1.0:\n        group.attr(\"opacity\", self._opacity)\n    if self._stroke_opacity != 1.0:\n        group.attr(\"stroke-opacity\", self._stroke_opacity)\n    if self._stroke_dasharray is not None:\n        group.attr(\"stroke-dasharray\", self._stroke_dasharray)\n    if self._fill_opacity != 1.0:\n        group.attr(\"fill-opacity\", self._fill_opacity)\n\n    (\n        group.select_all(\"rule\")\n        .data(values)\n        .join(\"path\")\n        .attr(\"stroke\", self._stroke)\n        .attr(\"fill\", self._fill)\n        .attr(\"stroke-width\", self._stroke_width)\n        .attr(\"d\", lambda d: line(d))\n    )\n</code></pre>"},{"location":"api/marks/rule_y/#plotynium.marks.RuleY.apply(svg)","title":"<code>svg</code>","text":""},{"location":"api/marks/rule_y/#plotynium.marks.RuleY.apply(ctx)","title":"<code>ctx</code>","text":""},{"location":"colorschemes/interpolations/","title":"From <code>Interpolation</code>","text":""},{"location":"colorschemes/interpolations/#usage","title":"Usage","text":"<p><code>Interpolation</code> is usually used for <code>ColorOptions</code>.</p> From <code>dict</code>With <code>ColorOptions</code> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    marks=[...],\n    color={\"scheme\": ply.Interpolation.MAGMA},\n)\n</code></pre> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    marks=[...],\n    color=ply.ColorOptions(scheme=ply.Interpolation.MAGMA)\n)\n</code></pre>"},{"location":"colorschemes/interpolations/#available-interpolations","title":"Available interpolations","text":"<p><code>Interpolation.BLUES</code></p> <p></p> <p><code>Interpolation.BRBG</code></p> <p></p> <p><code>Interpolation.BUGN</code></p> <p></p> <p><code>Interpolation.BUPU</code></p> <p></p> <p><code>Interpolation.CIVIDIS</code></p> <p></p> <p><code>Interpolation.COOL</code></p> <p></p> <p><code>Interpolation.GNBU</code></p> <p></p> <p><code>Interpolation.GREENS</code></p> <p></p> <p><code>Interpolation.GREYS</code></p> <p></p> <p><code>Interpolation.INFERNO</code></p> <p></p> <p><code>Interpolation.MAGMA</code></p> <p></p> <p><code>Interpolation.ORANGES</code></p> <p></p> <p><code>Interpolation.ORRD</code></p> <p></p> <p><code>Interpolation.PIYG</code></p> <p></p> <p><code>Interpolation.PLASMA</code></p> <p></p> <p><code>Interpolation.PRGN</code></p> <p></p> <p><code>Interpolation.PUBU</code></p> <p></p> <p><code>Interpolation.PUBUGN</code></p> <p></p> <p><code>Interpolation.PUOR</code></p> <p></p> <p><code>Interpolation.PURD</code></p> <p></p> <p><code>Interpolation.PURPLES</code></p> <p></p> <p><code>Interpolation.RAINBOW</code></p> <p></p> <p><code>Interpolation.RDBU</code></p> <p></p> <p><code>Interpolation.RDGY</code></p> <p></p> <p><code>Interpolation.RDPU</code></p> <p></p> <p><code>Interpolation.RDYLBU</code></p> <p></p> <p><code>Interpolation.RDYLGN</code></p> <p></p> <p><code>Interpolation.REDS</code></p> <p></p> <p><code>Interpolation.SINEBOW</code></p> <p></p> <p><code>Interpolation.SPECTRAL</code></p> <p></p> <p><code>Interpolation.TURBO</code></p> <p></p> <p><code>Interpolation.VIRIDIS</code></p> <p></p> <p><code>Interpolation.WARM</code></p> <p></p> <p><code>Interpolation.YLGN</code></p> <p></p> <p><code>Interpolation.YLGNBU</code></p> <p></p> <p><code>Interpolation.YLORBR</code></p> <p></p> <p><code>Interpolation.YLORRD</code></p> <p></p>"},{"location":"colorschemes/schemes/","title":"From <code>Scheme</code>","text":""},{"location":"colorschemes/schemes/#usage","title":"Usage","text":"<p><code>Scheme</code> is usually used for <code>ColorOptions</code>.</p> From <code>dict</code>With <code>ColorOptions</code> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    marks=[...],\n    color={\"scheme\": ply.Scheme.ACCENT},\n)\n</code></pre> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    marks=[...],\n    color=ply.ColorOptions(scheme=ply.Scheme.ACCENT)\n)\n</code></pre>"},{"location":"colorschemes/schemes/#available-schemes","title":"Available schemes","text":"<p><code>Scheme.ACCENT</code></p> <p></p> <p><code>Scheme.CATEGORY_10</code></p> <p></p> <p><code>Scheme.DARK_2</code></p> <p></p> <p><code>Scheme.OBSERVABLE_10</code></p> <p></p> <p><code>Scheme.PAIRED</code></p> <p></p> <p><code>Scheme.PASTEL_1</code></p> <p></p> <p><code>Scheme.PASTEL_2</code></p> <p></p> <p><code>Scheme.SET_1</code></p> <p></p> <p><code>Scheme.SET_2</code></p> <p></p> <p><code>Scheme.SET_3</code></p> <p></p> <p><code>Scheme.TABLEAU_10</code></p> <p></p>"},{"location":"guide/browser/","title":"Browser","text":"<p>You can open an SVG file directly in your browser.</p> <p></p>"},{"location":"guide/dimensions/","title":"Dimensions","text":"<p>You can change the dimensions of your visualization through <code>plot</code> parameters.</p> <pre><code>import plotynium as ply\nfrom math import sin, pi\nimport random\n\nrandom.seed(42)\n\ndata = [\n    {\n        \"x_values\": i / (4 * pi),\n        \"y_values\": sin(i / (4 * pi)) + 0.5 * (random.random() - 0.5),\n    }\n    for i in range(100)\n]\n\nplot = ply.plot(\n    width=928,\n    height=500,\n    margin_top=60,\n    margin_left=120,\n    margin_bottom=120,\n    margin_right=60,\n    marks=[ply.line(data, x=\"x_values\", y=\"y_values\")],\n)\n\nwith open(\"plot.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <p></p>"},{"location":"guide/export-cairosvg/","title":"Export with cairosvg","text":"<p><code>cairosvg</code> is a command-line interface for converting SVG to PNG, PDF, PS.</p>"},{"location":"guide/export-cairosvg/#installation","title":"Installation","text":"<pre><code>pip install cairosvg\n</code></pre> <p>Check the official website for more information.</p>"},{"location":"guide/export-cairosvg/#usage","title":"Usage","text":"<pre><code>$ cairosvg --help\nusage: cairosvg [-h] [-v] [-f {eps,pdf,png,ps,svg}] [-d DPI] [-W WIDTH] [-H HEIGHT] [-s SCALE] [-b COLOR] [-n] [-i] [-u] [--output-width OUTPUT_WIDTH] [--output-height OUTPUT_HEIGHT] [-o OUTPUT] input\n\nConvert SVG files to other formats\n\npositional arguments:\n  input                 input filename or URL\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -f {eps,pdf,png,ps,svg}, --format {eps,pdf,png,ps,svg}\n                        output format\n  -d DPI, --dpi DPI     ratio between 1 inch and 1 pixel\n  -W WIDTH, --width WIDTH\n                        width of the parent container in pixels\n  -H HEIGHT, --height HEIGHT\n                        height of the parent container in pixels\n  -s SCALE, --scale SCALE\n                        output scaling factor\n  -b COLOR, --background COLOR\n                        output background color\n  -n, --negate-colors   replace every vector color with its complement\n  -i, --invert-images   replace every raster pixel with its complementary color\n  -u, --unsafe          resolve XML entities and allow very large files (WARNING: vulnerable to XXE attacks and various DoS)\n  --output-width OUTPUT_WIDTH\n                        desired output width in pixels\n  --output-height OUTPUT_HEIGHT\n                        desired output height in pixels\n  -o OUTPUT, --output OUTPUT\n                        output filename\n</code></pre> <p>For instance, after running the example <code>examples/pca.py</code>, you can convert the SVG to PNG with <code>cairosvg</code>:</p> <pre><code>cairosvg pca.svg -o pca.png\n</code></pre>"},{"location":"guide/export-latex/","title":"Export with LaTeX","text":""},{"location":"guide/export-latex/#make-svg-visualization","title":"Make SVG visualization","text":"<p>If you want math equations in LaTeX, or you just want to export your visualization to LaTeX, you should follow this tutorial.</p> <p>Let's start with this simple code:</p> <pre><code>import plotynium as ply\n\nx = list(range(0, 21))\ndata = [\n    {\n        \"x\": xi,\n        \"y\": pow(xi, i + 1),\n        \"label\": (f\"$y = x^{i + 1}$\" if i &gt; 0 else \"$y = x$\"),\n    }\n    for i in range(3)\n    for xi in x\n]\n\nplot = ply.plot(\n    marks=[ply.line(data, x=\"x\", y=\"y\", stroke=\"label\")],\n    color={\"legend\": True, \"scheme\": ply.Scheme.OBSERVABLE_10},\n    y={\"specifier\": \"~s\"},\n)\n\nwith open(\"figure.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <p>Expected output</p> <p></p> <p>As you can see, labels contain <code>$</code> in order to make math equations through LaTeX.</p>"},{"location":"guide/export-latex/#convert-and-build-your-pdf","title":"Convert and build your PDF","text":"<ol> <li> <p>Convert the <code>figure.svg</code> to <code>figure.pdf_tex</code> with <code>inkscape</code>.</p> <pre><code>inkscape -D figure.svg -o figure.pdf --export-latex\n</code></pre> </li> <li> <p>Change the font size with the following command:</p> <pre><code>sed -i 's/\\\\\\f@size/ 7.5/g' figure.pdf_tex\n</code></pre> </li> <li> <p>Create a file <code>file.tex</code> and add the following content:</p> <pre><code>\\documentclass{article}\n\\usepackage{color}\n\\usepackage{graphicx}\n\n\\begin{document}\n\n\\begin{figure}[!ht]\n  \\centering\n  \\def\\svgwidth{\\columnwidth}\n  \\scalebox{0.8}{\\input{figure.pdf_tex}}\n  \\caption{Cool figure}\n\\end{figure}\n\n\\end{document}\n</code></pre> </li> <li> <p>Compile the LaTeX file with <code>pdflatex</code>:</p> <pre><code>pdflatex file.tex\n</code></pre> </li> <li> <p>Open <code>file.pdf</code></p> <p></p> </li> </ol>"},{"location":"guide/export-typst/","title":"Export with Typst","text":"<p>Typst supports SVG formats.</p> <ol> <li> <p>Make your SVG visualization</p> <pre><code>python examples/pi_prob.py\n</code></pre> <p>Expected output</p> <p></p> </li> <li> <p>Create a typst file <code>document.typ</code></p> <pre><code>#figure(\n    image(\"pi.svg\"),\n    caption: [Random points to estimate the value of $pi$],\n)\n</code></pre> </li> <li> <p>Compile the document </p> <pre><code>typst compile document.typ\n</code></pre> </li> <li> <p>Open <code>document.pdf</code></p> <p></p> </li> </ol>"},{"location":"guide/jupyter/","title":"Jupyter","text":"<p>The following steps help to visualize your SVG in Jupyter.</p> <ol> <li> <p>Import <code>display</code> and <code>HTML</code> from <code>IPython.display</code></p> <pre><code>from IPython.display import HTML, display\n</code></pre> </li> <li> <p>After building you SVG, add the following code in a new cell</p> With default background colorWith specific background color <pre><code>display(HTML(str(plot)), metadata={\"isolated\": True})\n</code></pre> <pre><code>display(\n    HTML(\"&lt;style&gt;body{background:#111111;}&lt;/style&gt;\" + str(plot)),\n    metadata={\"isolated\": True}\n)\n</code></pre> </li> </ol> <p></p>"},{"location":"guide/legend/","title":"Legend","text":"<p>There are two types of legend:</p> <ul> <li>discrete legend when there are several classes of data based on their color values or on their symbol shapes</li> <li>continuous legend when there are a gradient of colors</li> </ul>"},{"location":"guide/legend/#discrite-legend","title":"Discrite legend","text":"<pre><code>import plotynium as ply\nfrom math import sin, pi\nimport random\n\nrandom.seed(42)\n\ndata = [\n    {\n        \"x_values\": i / (4 * pi),\n        \"y_values\": sin(i / (4 * pi)) + 0.5 * (random.random() - 0.5),\n        \"label\": \"experimental\", # (1)!\n    }\n    for i in range(100)\n]\n\ndata += [\n    {\n        \"x_values\": i / (4 * pi),\n        \"y_values\": sin(i / (4 * pi)),\n        \"label\": \"theoritical\" # (2)!\n    }\n    for i in range(100)\n]\n\nplot = ply.plot(\n    width=928,\n    height=500,\n    marks=[\n        ply.line(\n            data,\n            x=\"x_values\",\n            y=\"y_values\",\n            stroke=\"label\", # (3)!\n        ),\n    ],\n    color={\"legend\": True},\n    style={\"color\": \"white\"},\n)\n\nwith open(\"plot.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>These values help to distinguish lines.</li> <li>These values help to distinguish lines.</li> <li>Stroke colors are chosen from the default colorscheme <code>Scheme.OBSERVABLE_10</code>.</li> </ol> <p>Note</p> <p>You can also specify your own function for <code>stroke</code> (or <code>fill</code>). Try this:</p> <pre><code>plot = ply.plot(\n    marks=[\n        ply.line(\n            ...,\n            stroke=lambda d: \"lightslategray\" if d[\"label\"] == \"experimental\" else \"red\",\n        ),\n    ],\n    color={\"legend\": True, \"labels\": {0: \"experimental\", 1: \"theoritical\"}},\n)\n</code></pre>"},{"location":"guide/legend/#continuous-legend","title":"Continuous legend","text":"<pre><code>import polars as pl\nimport plotynium as ply\n\nURL = (\n    \"https://static.observableusercontent.com/files/1734c862dd51ef67930fef3d\"\n    \"cd19e8184bb65c405683f55a085f97ca01c233713a53062c251fe0a6d72f93863fd5f71\"\n    \"4eadef3c9455b1b4f2ed90546cbc57b32?response-content-disposition=attachme\"\n    \"nt%3Bfilename*%3DUTF-8%27%27gistemp.csv\"\n)\n\ngistemp = pl.read_csv(URL).select(\n    pl.col(\"Date\").str.to_datetime(\"%Y-%m-%d\"),\n    pl.col(\"Anomaly\"),\n)\n\nplot = ply.plot(\n    marks=[\n        ply.rule_y([0]),\n        ply.dot(gistemp.to_dicts(), x=\"Date\", y=\"Anomaly\", stroke=\"Anomaly\"),\n    ],\n    y={\n        \"grid\": True,\n        \"specifier\": \"+f\",\n        \"label\": \"Surface temperature anomaly (\u00b0C)\"\n    },\n    color={\n        \"scheme\": ply.Interpolation.RDBU,\n        \"legend\": True,\n    },\n    margin_left=60,\n)\n\nwith open(\"diverging.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre>"},{"location":"guide/marks/","title":"Marks","text":"<p>You can draw multiple marks on the same plot.</p> <pre><code>import plotynium as ply\nfrom math import sin, pi\nimport random\n\nrandom.seed(42)\n\ndata = [\n    {\n        \"x_values\": i / (4 * pi),\n        \"y_values\": sin(i / (4 * pi)) + 0.5 * (random.random() - 0.5),\n    }\n    for i in range(100)\n]\n\nplot = ply.plot(\n    width=928,\n    height=500,\n    marks=[\n        ply.line(data, x=\"x_values\", y=\"y_values\"),\n        ply.dot(data, x=\"x_values\", y=\"y_values\", fill=\"black\"),\n        ply.rule_y([0]),\n    ],\n)\n\nwith open(\"plot.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <p></p>"},{"location":"guide/options/","title":"Options","text":"<p>The function <code>plot</code> supports options of X axis, Y axis, color legend, symbol legend, and style. When an option has different fields, you can find its appropriate classes for each option to know what are its fields. You can specify an option in two ways:</p> From <code>dict</code>With its appropriate class <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    marks=[...],\n    y={\n        \"grid\": True,\n        \"specifier\": \"+f\",\n        \"label\": \"Surface temperature anomaly (\u00b0C)\"\n    },\n)\n</code></pre> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    marks=[...],\n    y=ply.YOptions(\n        grid=True,\n        specifier=\"+f\",\n        label=\"Surface temperature anomaly (\u00b0C)\",\n    )\n)\n</code></pre>"},{"location":"guide/options/#grid-option","title":"<code>grid</code> option","text":"<p>This option adds grid on X axis and Y axis.</p> <pre><code>import plotynium as ply\nfrom math import sin, pi\nimport random\n\nrandom.seed(42)\n\ndata = [\n    {\n        \"x_values\": i / (4 * pi),\n        \"y_values\": sin(i / (4 * pi)) + 0.5 * (random.random() - 0.5),\n    }\n    for i in range(100)\n]\n\nplot = ply.plot(\n    width=928,\n    height=500,\n    marks=[ply.line(data, x=\"x_values\", y=\"y_values\")],\n    grid=True,\n)\n\nwith open(\"plot.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <p></p>"},{"location":"guide/options/#nice-option","title":"<code>nice</code> option","text":"<p>This option makes axis ticks nicer.</p> <pre><code>import plotynium as ply\nfrom math import sin, pi\nimport random\n\nrandom.seed(42)\n\ndata = [\n    {\n        \"x_values\": i / (4 * pi),\n        \"y_values\": sin(i / (4 * pi)) + 0.5 * (random.random() - 0.5),\n    }\n    for i in range(100)\n]\n\nplot = ply.plot(\n    width=928,\n    height=500,\n    marks=[ply.line(data, x=\"x_values\", y=\"y_values\")],\n    x={\"nice\": True},\n)\n\nwith open(\"plot.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <p></p> <p>Note</p> <p>By default, the option <code>nice</code> is <code>True</code> for Y axis.</p>"},{"location":"guide/options/#style-option","title":"<code>style</code> option","text":"<p>This option is applied X axis, Y axis, legend and text.</p> <pre><code>import plotynium as ply\nfrom math import sin, pi\nimport random\n\nrandom.seed(42)\n\ndata = [\n    {\n        \"x_values\": i / (4 * pi),\n        \"y_values\": sin(i / (4 * pi)) + 0.5 * (random.random() - 0.5),\n    }\n    for i in range(100)\n]\n\nplot = ply.plot(\n    width=928,\n    height=500,\n    margin_left=60,\n    marks=[ply.line(data, x=\"x_values\", y=\"y_values\")],\n    style={\"color\": \"steelblue\", \"font_size\": 15},\n)\n\nwith open(\"plot.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <p></p>"},{"location":"marks/area/","title":"Area mark","text":"<p>The Area draws the region between a baseline \\((x_1, y_1)\\) and a topline \\((x_2, y_2)\\) as in area chart. \\(x\\) scale and \\(y\\) scale are quantitive or temporal.</p> <p></p> <pre><code>import plotynium as plot\nimport polars as pl\n\nURL = (\n    \"https://static.observableusercontent.com/files/de259092d525c13bd10926ea\"\n    \"https://static.observableusercontent.com/files/de259092d525c13bd10926ea\"\n    \"f7add45b15f2771a8b39bc541a5bba1e0206add4880eb1d876be8df469328a85243b7d8\"\n    \"13a91feb8cc4966de582dc02e5f8609b7?response-content-disposition=attachme\"\n    \"nt%3Bfilename*%3DUTF-8%27%27aapl.csv\"\n)\n\n# Download data and prepare them\naapl = pl.read_csv(URL).select( # columns = ['date', 'close']\n    pl.col(\"date\").str.to_datetime(\"%Y-%m-%d\"),\n    pl.col(\"close\"),\n)\n\nplot = plot.plot(\n    width=928,\n    height=500,\n    marks=[\n        plot.area_y(\n            data=aapl.to_dicts(),\n            x=\"date\",\n            y=\"close\",\n            fill=\"#ffc105\",\n        )\n    ],\n    x={\"grid\": True, \"nice\": False},\n)\n\nwith open(\"area.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre>"},{"location":"marks/axis/","title":"Axis Mark","text":"<p>The AxisX mark makes an X axis.</p> <p></p> <p><pre><code>import plotynium as ply\n\nplot = ply.plot(\n    [\n        ply.axis_x(\n            list(range(21)),\n            anchor=\"top\",\n            label=\"Axis X\",\n        )\n    ],\n    margin_top=40\n)\n\nwith open(\"axis_x.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> The AxisY mark makes an Y axis.</p> <p></p> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    [\n        ply.axis_y(\n            list(range(21)),\n            anchor=\"right\",\n            label=\"Axis Y\",\n        )\n    ],\n    margin_right=60,\n)\n\nwith open(\"axis_y.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre>"},{"location":"marks/bar/","title":"Bar mark","text":"<p>The BarY mark draws vertical bar chart. A SortOptions helps to order the data and has an impact on the scale domain.</p> <p></p> <pre><code>import plotynium as plot\nfrom plotynium.options import SortOptions\nimport polars as pl\n\nURL = (\n    \"https://static.observableusercontent.com/files/09f63bb9ff086fef80717e2e\"\n    \"a8c974f918a996d2bfa3d8773d3ae12753942c002d0dfab833d7bee1e0c9cd358cd3578\"\n    \"c1cd0f9435595e76901508adc3964bbdc?response-content-disposition=attachme\"\n    \"nt%3Bfilename*%3DUTF-8%27%27alphabet.csv\"\n)\n\n# Download data as dataframe\nalphabet = pl.read_csv(URL) # columns = ['letter', 'frequency']\n\nplot = plot.plot(\n    width=928,\n    height=500,\n    marks=[\n        plot.bar_y(\n            data=alphabet.to_dicts(),\n            x=\"letter\",\n            y=\"frequency\",\n            sort={\"by\": \"frequency\", \"descending\": True}, # (1)!\n            fill=\"#ffc105\",\n        )\n    ],\n    margin_left=60,\n)\n\nwith open(\"bar.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>This parameter follows SortOptions API.</li> </ol> <p>The BarX mark draws horizontal bar chart. A SortOptions helps to order the data and has an impact on the scale domain.</p> <p></p> <pre><code>import plotynium as plot\nfrom plotynium.options import SortOptions\nimport polars as pl\n\nURL = (\n    \"https://static.observableusercontent.com/files/09f63bb9ff086fef80717e2e\"\n    \"a8c974f918a996d2bfa3d8773d3ae12753942c002d0dfab833d7bee1e0c9cd358cd3578\"\n    \"c1cd0f9435595e76901508adc3964bbdc?response-content-disposition=attachme\"\n    \"nt%3Bfilename*%3DUTF-8%27%27alphabet.csv\"\n)\n\n# Download data as dataframe\nalphabet = pl.read_csv(URL) # columns = ['letter', 'frequency']\n\nplot = plot.plot(\n    width=928,\n    height=500,\n    marks=[\n        ply.bar_x(\n            data=alphabet.to_dicts(),\n            x=\"frequency\",\n            y=\"letter\",\n            sort={\"by\": \"frequency\", \"descending\": True}, # (1)!\n            fill=\"#ffc105\",\n        )\n    ],\n    margin_left=60,\n)\n\nwith open(\"bar.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>This parameter follows SortOptions API.</li> </ol>"},{"location":"marks/dot/","title":"Dot mark","text":"<p>The Dot mark draws two-dimensional points (as circles or symbols) for making a scatter chart. \\(x\\) scale and \\(y\\) scale are quantitive or temporal.</p> <p></p> <pre><code>import polars as pl\nfrom sklearn.datasets import load_iris\n\nimport plotynium as ply\n\n# Load data from scikit-learn and prepare them\niris = load_iris()\ndf = pl.DataFrame(iris.data, schema=iris.feature_names)\ntargets = pl.Series(\"species\", iris.target)\nuniques = targets.unique().sort().to_list()\nnames = iris.target_names\ndf = df.insert_column(\n    df.width, targets.replace_strict(uniques, names, return_dtype=pl.String)\n)\n\nplot = ply.plot(\n    marks=[\n        ply.dot(\n            df.to_dicts(),\n            x=\"sepal length (cm)\",\n            y=\"sepal width (cm)\",\n            stroke=\"species\",\n        )\n    ],\n    color={\"scheme\": ply.Scheme.CATEGORY_10, \"legend\": True}, # (1)!\n)\n\nwith open(\"dot.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>Since there are 3 classes, it is recommanded to use a <code>Scheme</code> instead of an <code>Interpolation</code>. See also ColorSchemes.</li> </ol>"},{"location":"marks/grid/","title":"Grid mark","text":"<p>The GridX mark adds vertical lines from x ticks.</p> <p></p> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    [\n        ply.grid_x(\n            [0, 0.2, 0.5, 1],\n            stroke=\"#ffc105\",\n            stroke_opacity=1,\n        )\n    ],\n    style={\"color\": \"white\"}\n)\n\nwith open(\"grid_x.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <p>The GridY mark adds horizontal lines from y ticks.</p> <p></p> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    [\n        ply.grid_y(\n            [0, 0.2, 0.5, 1],\n            stroke=\"#ffc105\",\n            stroke_opacity=1,\n        )\n    ],\n    style={\"color\": \"white\"}\n)\n\nwith open(\"grid_y.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre>"},{"location":"marks/line/","title":"Line mark","text":"<p>The Line mark draws two-dimensional lines as in a line chart. \\(x\\) scale and \\(y\\) scale are quantitive or temporal.</p> <p></p> <pre><code>import plotynium as ply\nimport polars as pl\n\nURL = (\n    \"https://static.observableusercontent.com/files/de259092d525c13bd10926ea\"\n    \"f7add45b15f2771a8b39bc541a5bba1e0206add4880eb1d876be8df469328a85243b7d8\"\n    \"13a91feb8cc4966de582dc02e5f8609b7?response-content-disposition=attachme\"\n    \"nt%3Bfilename*%3DUTF-8%27%27aapl.csv\"\n)\n\n# Download data and prepare them\naapl = pl.read_csv(URL).select( # columns = ['date', 'close']\n    pl.col(\"date\").str.to_datetime(\"%Y-%m-%d\"),\n    pl.col(\"close\"),\n)\n\nplot = ply.plot(\n    width=928,\n    height=500,\n    marks=[\n        ply.line(\n            data=aapl.to_dicts(),\n            x=\"date\",\n            y=\"close\",\n            stroke=\"#ffc105\",\n            stroke_width=1.5\n        ),\n        ply.rule_y([0]) # (1)!\n    ],\n    x={\"grid\": True, \"label\": \"\"},\n    y={\"label\": \"\"},\n)\n\nwith open(\"line.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>Horizontal line on \\(y = 0\\)</li> </ol>"},{"location":"marks/rule/","title":"Rule mark","text":"<p>The RuleX mark draws vertical lines given a list of \\(x\\) positions.</p> <p></p> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    [\n        ply.rule_x(\n            [i / 10 for i in range(11)],\n            stroke=lambda d: ply.Interpolation.INFERNO(d[0][0]), # (1)!\n        ),\n    ],\n)\n\nwith open(\"rule_x.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>The type of <code>d</code> is <code>tuple[tuple[float, float], tuple[float, float]]</code> which represents \\(((x_0, y_0), (x_1, y_1))\\) coordinates of one line. Also, <code>ply.Interpolation</code> accepts values between <code>0</code> and <code>1</code>.</li> </ol> <p>The RuleY mark draws horizontal lines given a list of \\(y\\) positions.</p> <p></p> <pre><code>import plotynium as ply\n\nplot = ply.plot(\n    [\n        ply.rule_y(\n            [i / 10 for i in range(11)],\n            stroke=lambda d: ply.Interpolation.INFERNO(d[0][1]), # (1)!\n        ),\n    ],\n)\n\nwith open(\"rule_y.svg\", \"w\") as file:\n    file.write(str(plot))\n</code></pre> <ol> <li>The type of <code>d</code> is <code>tuple[tuple[float, float], tuple[float, float]]</code> which represents \\(((x_0, y_0), (x_1, y_1))\\) coordinates of one line. Also. <code>ply.Interpolation</code> accepts values between <code>0</code> and <code>1</code>.</li> </ol>"}]}